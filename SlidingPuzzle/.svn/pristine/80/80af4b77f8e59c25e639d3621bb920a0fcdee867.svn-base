<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="en">
<head>
<!-- Generated by javadoc (1.8.0_71) on Fri May 27 18:49:17 EDT 2016 -->
<title>SimplePuzzleState</title>
<meta name="date" content="2016-05-27">
<link rel="stylesheet" type="text/css" href="../../../../../stylesheet.css" title="Style">
<script type="text/javascript" src="../../../../../script.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="SimplePuzzleState";
        }
    }
    catch(err) {
    }
//-->
var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":9,"i8":10,"i9":10,"i10":10,"i11":10,"i12":9,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":9,"i19":10,"i20":10,"i21":10,"i22":9,"i23":10};
var tabs = {65535:["t0","All Methods"],1:["t1","Static Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/SimplePuzzleState.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../../../../../deprecated-list.html">Deprecated</a></li>
<li><a href="../../../../../index-files/index-1.html">Index</a></li>
<li><a href="../../../../../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.Operation.html" title="enum in edu.wm.cs.cs301.slidingpuzzle"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleState.Move.html" title="class in edu.wm.cs.cs301.slidingpuzzle"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="../../../../../index.html?edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleState.html" target="_top">Frames</a></li>
<li><a href="SimplePuzzleState.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="../../../../../allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li><a href="#nested.class.summary">Nested</a>&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<div class="subTitle">edu.wm.cs.cs301.slidingpuzzle</div>
<h2 title="Class SimplePuzzleState" class="title">Class SimplePuzzleState</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>edu.wm.cs.cs301.slidingpuzzle.SimplePuzzleState</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<dl>
<dt>All Implemented Interfaces:</dt>
<dd><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.html" title="interface in edu.wm.cs.cs301.slidingpuzzle">PuzzleState</a></dd>
</dl>
<hr>
<br>
<pre>public class <span class="typeNameLabel">SimplePuzzleState</span>
extends java.lang.Object
implements <a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.html" title="interface in edu.wm.cs.cs301.slidingpuzzle">PuzzleState</a></pre>
<div class="block">A simple implementation of PuzzleState.</div>
<dl>
<dt><span class="simpleTagLabel">Author:</span></dt>
<dd>Ben</dd>
</dl>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- ======== NESTED CLASS SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="nested.class.summary">
<!--   -->
</a>
<h3>Nested Class Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Nested Class Summary table, listing nested classes, and an explanation">
<caption><span>Nested Classes</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Class and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>private class&nbsp;</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleState.Move.html" title="class in edu.wm.cs.cs301.slidingpuzzle">SimplePuzzleState.Move</a></span></code>
<div class="block">Utility class to make shuffling easier</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>private class&nbsp;</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleState.Pair.html" title="class in edu.wm.cs.cs301.slidingpuzzle">SimplePuzzleState.Pair</a></span></code>
<div class="block">Utility class to simplify BFS and shuffling code</div>
</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="nested.classes.inherited.from.class.edu.wm.cs.cs301.slidingpuzzle.PuzzleState">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from interface&nbsp;edu.wm.cs.cs301.slidingpuzzle.<a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.html" title="interface in edu.wm.cs.cs301.slidingpuzzle">PuzzleState</a></h3>
<code><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.Operation.html" title="enum in edu.wm.cs.cs301.slidingpuzzle">PuzzleState.Operation</a></code></li>
</ul>
</li>
</ul>
<!-- =========== FIELD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.summary">
<!--   -->
</a>
<h3>Field Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Field and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>private int[][]</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleState.html#current">current</a></span></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>private java.util.ArrayDeque&lt;<a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.html" title="interface in edu.wm.cs.cs301.slidingpuzzle">PuzzleState</a>&gt;</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleState.html#history">history</a></span></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>private <a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.Operation.html" title="enum in edu.wm.cs.cs301.slidingpuzzle">PuzzleState.Operation</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleState.html#lastOperation">lastOperation</a></span></code>&nbsp;</td>
</tr>
</table>
</li>
</ul>
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleState.html#SimplePuzzleState--">SimplePuzzleState</a></span>()</code>
<div class="block">Constructs a SimplePuzzleState with null internals.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colOne"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleState.html#SimplePuzzleState-int-int-">SimplePuzzleState</a></span>(int&nbsp;dim,
                 int&nbsp;emptySlots)</code>
<div class="block">Constructs and initializes a SimplePuzzleState using the provided dimensions and number of empty slots.</div>
</td>
</tr>
<tr class="altColor">
<td class="colOne"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleState.html#SimplePuzzleState-edu.wm.cs.cs301.slidingpuzzle.SimplePuzzleState-int:A:A-edu.wm.cs.cs301.slidingpuzzle.PuzzleState.Operation-">SimplePuzzleState</a></span>(<a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleState.html" title="class in edu.wm.cs.cs301.slidingpuzzle">SimplePuzzleState</a>&nbsp;last,
                 int[][]&nbsp;tiles,
                 <a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.Operation.html" title="enum in edu.wm.cs.cs301.slidingpuzzle">PuzzleState.Operation</a>&nbsp;op)</code>
<div class="block">Constructs a SimplePuzzleState descendant from a previous state</div>
</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method.summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t1" class="tableTab"><span><a href="javascript:show(1);">Static Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr id="i0" class="altColor">
<td class="colFirst"><code>private boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleState.html#canMoveFrom-int-int-">canMoveFrom</a></span>(int&nbsp;row,
           int&nbsp;col)</code>
<div class="block">Checks if a (row,col) position is on the grid and holds a tile.</div>
</td>
</tr>
<tr id="i1" class="rowColor">
<td class="colFirst"><code>private boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleState.html#canMoveTo-int-int-">canMoveTo</a></span>(int&nbsp;row,
         int&nbsp;col)</code>
<div class="block">Checks if a (row,col) position is on the grid and empty.</div>
</td>
</tr>
<tr id="i2" class="altColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleState.html#equals-java.lang.Object-">equals</a></span>(java.lang.Object&nbsp;obj)</code>&nbsp;</td>
</tr>
<tr id="i3" class="rowColor">
<td class="colFirst"><code>private java.util.List&lt;<a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleState.Move.html" title="class in edu.wm.cs.cs301.slidingpuzzle">SimplePuzzleState.Move</a>&gt;</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleState.html#findAllMoves--">findAllMoves</a></span>()</code>
<div class="block">Finds all valid moves to anywhere on the board.</div>
</td>
</tr>
<tr id="i4" class="altColor">
<td class="colFirst"><code>private java.util.List&lt;<a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleState.Move.html" title="class in edu.wm.cs.cs301.slidingpuzzle">SimplePuzzleState.Move</a>&gt;</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleState.html#findMovesTo-int-int-">findMovesTo</a></span>(int&nbsp;row,
           int&nbsp;col)</code>
<div class="block">Finds all moves that are valid which shift a piece onto (row, col).</div>
</td>
</tr>
<tr id="i5" class="rowColor">
<td class="colFirst"><code>private java.util.List&lt;<a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.Operation.html" title="enum in edu.wm.cs.cs301.slidingpuzzle">PuzzleState.Operation</a>&gt;</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleState.html#findOpsFrom-int-int-">findOpsFrom</a></span>(int&nbsp;row,
           int&nbsp;col)</code>
<div class="block">Finds all operations that are valid to perform on a tile at (row, col).</div>
</td>
</tr>
<tr id="i6" class="altColor">
<td class="colFirst"><code><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.html" title="interface in edu.wm.cs.cs301.slidingpuzzle">PuzzleState</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleState.html#flip-int-int-int-int-">flip</a></span>(int&nbsp;startRow,
    int&nbsp;startColumn,
    int&nbsp;endRow,
    int&nbsp;endColumn)</code>
<div class="block">A flip is a short cut for a possible series of move operations.</div>
</td>
</tr>
<tr id="i7" class="rowColor">
<td class="colFirst"><code>private static int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleState.html#getColShift-edu.wm.cs.cs301.slidingpuzzle.PuzzleState.Operation-">getColShift</a></span>(<a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.Operation.html" title="enum in edu.wm.cs.cs301.slidingpuzzle">PuzzleState.Operation</a>&nbsp;op)</code>
<div class="block">Returns the difference in column a piece would experience if shifted by the operation.</div>
</td>
</tr>
<tr id="i8" class="altColor">
<td class="colFirst"><code>private java.util.ArrayDeque&lt;<a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.html" title="interface in edu.wm.cs.cs301.slidingpuzzle">PuzzleState</a>&gt;</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleState.html#getHistory--">getHistory</a></span>()</code>
<div class="block">Gets the history of the puzzle (the states it has held in order to reach the current state)</div>
</td>
</tr>
<tr id="i9" class="rowColor">
<td class="colFirst"><code><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.Operation.html" title="enum in edu.wm.cs.cs301.slidingpuzzle">PuzzleState.Operation</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleState.html#getOperation--">getOperation</a></span>()</code>
<div class="block">Retrieves the operation by which this state is reached.</div>
</td>
</tr>
<tr id="i10" class="altColor">
<td class="colFirst"><code><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.html" title="interface in edu.wm.cs.cs301.slidingpuzzle">PuzzleState</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleState.html#getParent--">getParent</a></span>()</code>
<div class="block">Get the parent state which is the state from which the current state was reached.</div>
</td>
</tr>
<tr id="i11" class="rowColor">
<td class="colFirst"><code>int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleState.html#getPathLength--">getPathLength</a></span>()</code>
<div class="block">Get length of the path from initial state to the current state.</div>
</td>
</tr>
<tr id="i12" class="altColor">
<td class="colFirst"><code>private static int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleState.html#getRowShift-edu.wm.cs.cs301.slidingpuzzle.PuzzleState.Operation-">getRowShift</a></span>(<a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.Operation.html" title="enum in edu.wm.cs.cs301.slidingpuzzle">PuzzleState.Operation</a>&nbsp;op)</code>
<div class="block">Returns the difference in row a piece would experience if shifted by the operation.</div>
</td>
</tr>
<tr id="i13" class="rowColor">
<td class="colFirst"><code>int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleState.html#getValue-int-int-">getValue</a></span>(int&nbsp;row,
        int&nbsp;column)</code>
<div class="block">Get the value of the tile at the given row and column position.</div>
</td>
</tr>
<tr id="i14" class="altColor">
<td class="colFirst"><code>int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleState.html#hashCode--">hashCode</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i15" class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleState.html#isEmpty-int-int-">isEmpty</a></span>(int&nbsp;row,
       int&nbsp;column)</code>
<div class="block">Tells if the current state has an empty slot at the given position with 
 coordinates (row, column).</div>
</td>
</tr>
<tr id="i16" class="altColor">
<td class="colFirst"><code>private <a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.html" title="interface in edu.wm.cs.cs301.slidingpuzzle">PuzzleState</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleState.html#makeMove-edu.wm.cs.cs301.slidingpuzzle.SimplePuzzleState.Move-">makeMove</a></span>(<a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleState.Move.html" title="class in edu.wm.cs.cs301.slidingpuzzle">SimplePuzzleState.Move</a>&nbsp;m)</code>&nbsp;</td>
</tr>
<tr id="i17" class="rowColor">
<td class="colFirst"><code><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.html" title="interface in edu.wm.cs.cs301.slidingpuzzle">PuzzleState</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleState.html#move-int-int-edu.wm.cs.cs301.slidingpuzzle.PuzzleState.Operation-">move</a></span>(int&nbsp;row,
    int&nbsp;column,
    <a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.Operation.html" title="enum in edu.wm.cs.cs301.slidingpuzzle">PuzzleState.Operation</a>&nbsp;op)</code>
<div class="block">Checks if it is possible to move a tile from the given position in the given direction.</div>
</td>
</tr>
<tr id="i18" class="altColor">
<td class="colFirst"><code>private static int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleState.html#numTiles-int-int-">numTiles</a></span>(int&nbsp;dim,
        int&nbsp;emptySlots)</code>
<div class="block">Returns the number of filled tiles in the puzzle, 
 given its dimensions and number of empty slots.</div>
</td>
</tr>
<tr id="i19" class="rowColor">
<td class="colFirst"><code>private boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleState.html#positionValid-int-int-">positionValid</a></span>(int&nbsp;row,
             int&nbsp;col)</code>
<div class="block">Checks if a (row,col) position is on the puzzle grid.</div>
</td>
</tr>
<tr id="i20" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleState.html#setToInitialState-int-int-">setToInitialState</a></span>(int&nbsp;dimension,
                 int&nbsp;numberOfEmptySlots)</code>
<div class="block">Sets or resets PuzzleState object to the initial (final) state of a game
 with the given dimension and number of empty slots.</div>
</td>
</tr>
<tr id="i21" class="rowColor">
<td class="colFirst"><code><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.html" title="interface in edu.wm.cs.cs301.slidingpuzzle">PuzzleState</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleState.html#shuffleBoard-int-">shuffleBoard</a></span>(int&nbsp;pathLength)</code>
<div class="block">Creates a random path from this state to the newly generated returned state
 that has the given length.</div>
</td>
</tr>
<tr id="i22" class="altColor">
<td class="colFirst"><code>private static int[][]</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleState.html#swap-int:A:A-int-int-int-int-">swap</a></span>(int[][]&nbsp;original,
    int&nbsp;row1,
    int&nbsp;col1,
    int&nbsp;row2,
    int&nbsp;col2)</code>
<div class="block">Returns an altered version of the original matrix with the values at (row1, col1) and (row2, col2) swapped.</div>
</td>
</tr>
<tr id="i23" class="rowColor">
<td class="colFirst"><code>java.lang.String</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleState.html#toString--">toString</a></span>()</code>&nbsp;</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>clone, finalize, getClass, notify, notifyAll, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ============ FIELD DETAIL =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.detail">
<!--   -->
</a>
<h3>Field Detail</h3>
<a name="current">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>current</h4>
<pre>private&nbsp;int[][] current</pre>
</li>
</ul>
<a name="lastOperation">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>lastOperation</h4>
<pre>private&nbsp;<a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.Operation.html" title="enum in edu.wm.cs.cs301.slidingpuzzle">PuzzleState.Operation</a> lastOperation</pre>
</li>
</ul>
<a name="history">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>history</h4>
<pre>private&nbsp;java.util.ArrayDeque&lt;<a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.html" title="interface in edu.wm.cs.cs301.slidingpuzzle">PuzzleState</a>&gt; history</pre>
</li>
</ul>
</li>
</ul>
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="SimplePuzzleState--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>SimplePuzzleState</h4>
<pre>public&nbsp;SimplePuzzleState()</pre>
<div class="block">Constructs a SimplePuzzleState with null internals.</div>
</li>
</ul>
<a name="SimplePuzzleState-int-int-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>SimplePuzzleState</h4>
<pre>public&nbsp;SimplePuzzleState(int&nbsp;dim,
                         int&nbsp;emptySlots)</pre>
<div class="block">Constructs and initializes a SimplePuzzleState using the provided dimensions and number of empty slots.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>dim</code> - the number of rows per tile / column</dd>
<dd><code>emptySlots</code> - the number of slots to leave empty</dd>
</dl>
</li>
</ul>
<a name="SimplePuzzleState-edu.wm.cs.cs301.slidingpuzzle.SimplePuzzleState-int:A:A-edu.wm.cs.cs301.slidingpuzzle.PuzzleState.Operation-">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>SimplePuzzleState</h4>
<pre>public&nbsp;SimplePuzzleState(<a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleState.html" title="class in edu.wm.cs.cs301.slidingpuzzle">SimplePuzzleState</a>&nbsp;last,
                         int[][]&nbsp;tiles,
                         <a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.Operation.html" title="enum in edu.wm.cs.cs301.slidingpuzzle">PuzzleState.Operation</a>&nbsp;op)</pre>
<div class="block">Constructs a SimplePuzzleState descendant from a previous state</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>last</code> - the previous state</dd>
<dd><code>tiles</code> - the new status of the puzzle board</dd>
<dd><code>op</code> - the operation which changed the last state to the new status</dd>
</dl>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method.detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="numTiles-int-int-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>numTiles</h4>
<pre>private static&nbsp;int&nbsp;numTiles(int&nbsp;dim,
                            int&nbsp;emptySlots)</pre>
<div class="block">Returns the number of filled tiles in the puzzle, 
 given its dimensions and number of empty slots.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>dim</code> - the number of rows / columns</dd>
<dd><code>emptySlots</code> - the number of slots left empty</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>the number of filled tiles in the puzzle</dd>
</dl>
</li>
</ul>
<a name="swap-int:A:A-int-int-int-int-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>swap</h4>
<pre>private static&nbsp;int[][]&nbsp;swap(int[][]&nbsp;original,
                            int&nbsp;row1,
                            int&nbsp;col1,
                            int&nbsp;row2,
                            int&nbsp;col2)</pre>
<div class="block">Returns an altered version of the original matrix with the values at (row1, col1) and (row2, col2) swapped.
 Used when creating new PuzzleStates in move().</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>original</code> - matrix of the original values</dd>
<dd><code>row1</code> - row of first value being swapped</dd>
<dd><code>col1</code> - column of first value being swapped</dd>
<dd><code>row2</code> - row of second value being swapped</dd>
<dd><code>col2</code> - column of second value being swapped</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>altered matrix with the swap completed</dd>
</dl>
</li>
</ul>
<a name="getRowShift-edu.wm.cs.cs301.slidingpuzzle.PuzzleState.Operation-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getRowShift</h4>
<pre>private static&nbsp;int&nbsp;getRowShift(<a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.Operation.html" title="enum in edu.wm.cs.cs301.slidingpuzzle">PuzzleState.Operation</a>&nbsp;op)</pre>
<div class="block">Returns the difference in row a piece would experience if shifted by the operation.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>op</code> - the operation</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>the amount by which the operation shifts vertically</dd>
</dl>
</li>
</ul>
<a name="getColShift-edu.wm.cs.cs301.slidingpuzzle.PuzzleState.Operation-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getColShift</h4>
<pre>private static&nbsp;int&nbsp;getColShift(<a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.Operation.html" title="enum in edu.wm.cs.cs301.slidingpuzzle">PuzzleState.Operation</a>&nbsp;op)</pre>
<div class="block">Returns the difference in column a piece would experience if shifted by the operation.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>op</code> - the operations</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>the amount by which the operation shifts horizontally</dd>
</dl>
</li>
</ul>
<a name="setToInitialState-int-int-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setToInitialState</h4>
<pre>public&nbsp;void&nbsp;setToInitialState(int&nbsp;dimension,
                              int&nbsp;numberOfEmptySlots)</pre>
<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.html#setToInitialState-int-int-">PuzzleState</a></code></span></div>
<div class="block">Sets or resets PuzzleState object to the initial (final) state of a game
 with the given dimension and number of empty slots.
 The initial state is the same as the final state. All tiles are ordered
 from top-left to bottom-right, empty slots are at the bottom-right.
 Parent and operation are set to null.</div>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.html#setToInitialState-int-int-">setToInitialState</a></code>&nbsp;in interface&nbsp;<code><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.html" title="interface in edu.wm.cs.cs301.slidingpuzzle">PuzzleState</a></code></dd>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>dimension</code> - is the number of tiles per row (or column)</dd>
<dd><code>numberOfEmptySlots</code> - is a number between 1 and 3</dd>
</dl>
</li>
</ul>
<a name="getValue-int-int-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getValue</h4>
<pre>public&nbsp;int&nbsp;getValue(int&nbsp;row,
                    int&nbsp;column)</pre>
<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.html#getValue-int-int-">PuzzleState</a></code></span></div>
<div class="block">Get the value of the tile at the given row and column position. 
 An empty slot is represented as 0. 
 The row, column index starts at 0. The top-left position is (0,0).</div>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.html#getValue-int-int-">getValue</a></code>&nbsp;in interface&nbsp;<code><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.html" title="interface in edu.wm.cs.cs301.slidingpuzzle">PuzzleState</a></code></dd>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>row</code> - is the row index, range 0,1,..., dimension-1</dd>
<dd><code>column</code> - is the column index, range 0,1,..., dimension-1</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>value for the tile at the given position, range 0,1,...,dimension^2-1</dd>
</dl>
</li>
</ul>
<a name="getParent--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getParent</h4>
<pre>public&nbsp;<a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.html" title="interface in edu.wm.cs.cs301.slidingpuzzle">PuzzleState</a>&nbsp;getParent()</pre>
<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.html#getParent--">PuzzleState</a></code></span></div>
<div class="block">Get the parent state which is the state from which the current state was reached.
 The parent state is useful if one wants to represent
 that a puzzle state A moves to puzzle state B with a particular move operation.
 For this example B.getParent() returns A. Obtaining A is useful to navigate back on
 a path from a current state to a initial state where all tiles are sorted.
 The initial state does not have a parent.</div>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.html#getParent--">getParent</a></code>&nbsp;in interface&nbsp;<code><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.html" title="interface in edu.wm.cs.cs301.slidingpuzzle">PuzzleState</a></code></dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>a previously stored parent state or null if the state is the initial state.</dd>
</dl>
</li>
</ul>
<a name="getOperation--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getOperation</h4>
<pre>public&nbsp;<a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.Operation.html" title="enum in edu.wm.cs.cs301.slidingpuzzle">PuzzleState.Operation</a>&nbsp;getOperation()</pre>
<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.html#getOperation--">PuzzleState</a></code></span></div>
<div class="block">Retrieves the operation by which this state is reached.
 The operation is set when applying move or flip operations.
 The initial state has no operation.</div>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.html#getOperation--">getOperation</a></code>&nbsp;in interface&nbsp;<code><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.html" title="interface in edu.wm.cs.cs301.slidingpuzzle">PuzzleState</a></code></dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>previously stored Operation or null if there is none.</dd>
</dl>
</li>
</ul>
<a name="getPathLength--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getPathLength</h4>
<pre>public&nbsp;int&nbsp;getPathLength()</pre>
<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.html#getPathLength--">PuzzleState</a></code></span></div>
<div class="block">Get length of the path from initial state to the current state.
 A path is a sequence of states that result from a series of move operations
 that are sequentially applied to the initial state to get to the current state.
 The initial state has a path length of 0, states that are reached with one move 
 have path length of one and so forth.
 A flip operation is a GUI short cut and is internally represented 
 with a sequence of move operations.</div>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.html#getPathLength--">getPathLength</a></code>&nbsp;in interface&nbsp;<code><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.html" title="interface in edu.wm.cs.cs301.slidingpuzzle">PuzzleState</a></code></dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>the number of move operations from initial state to this state, 
 the returned value is greater or equal 0</dd>
</dl>
</li>
</ul>
<a name="getHistory--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getHistory</h4>
<pre>private&nbsp;java.util.ArrayDeque&lt;<a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.html" title="interface in edu.wm.cs.cs301.slidingpuzzle">PuzzleState</a>&gt;&nbsp;getHistory()</pre>
<div class="block">Gets the history of the puzzle (the states it has held in order to reach the current state)</div>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>deque containing the history, with the front holding the initial state and the end holding the last state</dd>
</dl>
</li>
</ul>
<a name="positionValid-int-int-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>positionValid</h4>
<pre>private&nbsp;boolean&nbsp;positionValid(int&nbsp;row,
                              int&nbsp;col)</pre>
<div class="block">Checks if a (row,col) position is on the puzzle grid.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>row</code> - of the position to check</dd>
<dd><code>col</code> - column of the position to check</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if the position is on the grid, false otherwise</dd>
</dl>
</li>
</ul>
<a name="canMoveTo-int-int-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>canMoveTo</h4>
<pre>private&nbsp;boolean&nbsp;canMoveTo(int&nbsp;row,
                          int&nbsp;col)</pre>
<div class="block">Checks if a (row,col) position is on the grid and empty.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>row</code> - of the position to check</dd>
<dd><code>col</code> - column of the position to check</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if the position can be moved to, false otherwise</dd>
</dl>
</li>
</ul>
<a name="canMoveFrom-int-int-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>canMoveFrom</h4>
<pre>private&nbsp;boolean&nbsp;canMoveFrom(int&nbsp;row,
                            int&nbsp;col)</pre>
<div class="block">Checks if a (row,col) position is on the grid and holds a tile.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>row</code> - of the position to check</dd>
<dd><code>col</code> - column of the position to check</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if the position can be moved from, false otherwise</dd>
</dl>
</li>
</ul>
<a name="findOpsFrom-int-int-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>findOpsFrom</h4>
<pre>private&nbsp;java.util.List&lt;<a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.Operation.html" title="enum in edu.wm.cs.cs301.slidingpuzzle">PuzzleState.Operation</a>&gt;&nbsp;findOpsFrom(int&nbsp;row,
                                                          int&nbsp;col)</pre>
<div class="block">Finds all operations that are valid to perform on a tile at (row, col).</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>row</code> - of the position to check</dd>
<dd><code>col</code> - column of the position to check</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>list of valid operations</dd>
</dl>
</li>
</ul>
<a name="findMovesTo-int-int-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>findMovesTo</h4>
<pre>private&nbsp;java.util.List&lt;<a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleState.Move.html" title="class in edu.wm.cs.cs301.slidingpuzzle">SimplePuzzleState.Move</a>&gt;&nbsp;findMovesTo(int&nbsp;row,
                                                           int&nbsp;col)</pre>
<div class="block">Finds all moves that are valid which shift a piece onto (row, col).</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>row</code> - of the position to check</dd>
<dd><code>col</code> - column of the position to check</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>list of valid moves</dd>
</dl>
</li>
</ul>
<a name="findAllMoves--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>findAllMoves</h4>
<pre>private&nbsp;java.util.List&lt;<a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleState.Move.html" title="class in edu.wm.cs.cs301.slidingpuzzle">SimplePuzzleState.Move</a>&gt;&nbsp;findAllMoves()</pre>
<div class="block">Finds all valid moves to anywhere on the board.</div>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>list of valid moves</dd>
</dl>
</li>
</ul>
<a name="move-int-int-edu.wm.cs.cs301.slidingpuzzle.PuzzleState.Operation-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>move</h4>
<pre>public&nbsp;<a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.html" title="interface in edu.wm.cs.cs301.slidingpuzzle">PuzzleState</a>&nbsp;move(int&nbsp;row,
                        int&nbsp;column,
                        <a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.Operation.html" title="enum in edu.wm.cs.cs301.slidingpuzzle">PuzzleState.Operation</a>&nbsp;op)</pre>
<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.html#move-int-int-edu.wm.cs.cs301.slidingpuzzle.PuzzleState.Operation-">PuzzleState</a></code></span></div>
<div class="block">Checks if it is possible to move a tile from the given position in the given direction.
 If it is, the method returns a new instance of PuzzleState where the parent state is set
 to this object, i.e. the current state before the move, the operation is set to op and 
 the state is set to the state that results from the move operation. The operation also
 sets the distance from the initial state for the returned state.
 If the move is not possible, the method returns null.</div>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.html#move-int-int-edu.wm.cs.cs301.slidingpuzzle.PuzzleState.Operation-">move</a></code>&nbsp;in interface&nbsp;<code><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.html" title="interface in edu.wm.cs.cs301.slidingpuzzle">PuzzleState</a></code></dd>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>row</code> - is an index in the range 0,1,..., dimension-1</dd>
<dd><code>column</code> - is an index in the range 0,1,..., dimension-1</dd>
<dd><code>op</code> - gives an operation such as move left or move up.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>new PuzzleState for legal move. For illegal move operation it returns null.</dd>
</dl>
</li>
</ul>
<a name="makeMove-edu.wm.cs.cs301.slidingpuzzle.SimplePuzzleState.Move-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>makeMove</h4>
<pre>private&nbsp;<a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.html" title="interface in edu.wm.cs.cs301.slidingpuzzle">PuzzleState</a>&nbsp;makeMove(<a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleState.Move.html" title="class in edu.wm.cs.cs301.slidingpuzzle">SimplePuzzleState.Move</a>&nbsp;m)</pre>
</li>
</ul>
<a name="flip-int-int-int-int-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>flip</h4>
<pre>public&nbsp;<a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.html" title="interface in edu.wm.cs.cs301.slidingpuzzle">PuzzleState</a>&nbsp;flip(int&nbsp;startRow,
                        int&nbsp;startColumn,
                        int&nbsp;endRow,
                        int&nbsp;endColumn)</pre>
<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.html#flip-int-int-int-int-">PuzzleState</a></code></span></div>
<div class="block">A flip is a short cut for a possible series of move operations. 
 In the GUI, it results from a drag operations across multiple empty slots.
 Check if it is possible to move a tile from the start position to the end position.
 If start and end are not adjacent, there must be empty positions in between to make 
 a sequence of moves possible from start to end.
 If this is possible, the method returns a new instance of PuzzleState where  
 the state is set to the state that results from the sequence of move operations.
 A number of intermediate PuzzleStates is created as needed to represent the 
 sequence of move operations such that one can work backwards from the resulting
 state towards the starting state. 
 If the move is not possible, the method returns null.
 Starting position has coordinates (startRow,startColumn).
 Ending position has coordinates (endRow,endColumn).</div>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.html#flip-int-int-int-int-">flip</a></code>&nbsp;in interface&nbsp;<code><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.html" title="interface in edu.wm.cs.cs301.slidingpuzzle">PuzzleState</a></code></dd>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>startRow</code> - is an index in the range 0,1,..., dimension-1</dd>
<dd><code>startColumn</code> - is an index in the range 0,1,..., dimension-1</dd>
<dd><code>endRow</code> - is an index in the range 0,1,..., dimension-1</dd>
<dd><code>endColumn</code> - is an index in the range 0,1,..., dimension-1</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>new PuzzleState for legal sequence of moves, otherwise null.</dd>
</dl>
</li>
</ul>
<a name="shuffleBoard-int-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>shuffleBoard</h4>
<pre>public&nbsp;<a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.html" title="interface in edu.wm.cs.cs301.slidingpuzzle">PuzzleState</a>&nbsp;shuffleBoard(int&nbsp;pathLength)</pre>
<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.html#shuffleBoard-int-">PuzzleState</a></code></span></div>
<div class="block">Creates a random path from this state to the newly generated returned state
 that has the given length. The states are connected with a number of intermediate
 PuzzleStates to represent the path such that one can reverse from the resulting
 state backwards to the initial state in a step-by-step manner with the help 
 of the getParent() method. For state on the sequence, the getPathLength() method
 gives the number of steps away from the initial state.
 A path that contains cycles should be avoided as this is boring for the game.
 The path is generated with the help of a random number generator to make it 
 irregular and non-deterministic.</div>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.html#shuffleBoard-int-">shuffleBoard</a></code>&nbsp;in interface&nbsp;<code><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.html" title="interface in edu.wm.cs.cs301.slidingpuzzle">PuzzleState</a></code></dd>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>pathLength</code> - is a value greater or equal 0, denotes the number of steps from this state to 
 the returned state</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>state that is reachable with the given number of moves</dd>
</dl>
</li>
</ul>
<a name="isEmpty-int-int-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isEmpty</h4>
<pre>public&nbsp;boolean&nbsp;isEmpty(int&nbsp;row,
                       int&nbsp;column)</pre>
<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.html#isEmpty-int-int-">PuzzleState</a></code></span></div>
<div class="block">Tells if the current state has an empty slot at the given position with 
 coordinates (row, column).</div>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.html#isEmpty-int-int-">isEmpty</a></code>&nbsp;in interface&nbsp;<code><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.html" title="interface in edu.wm.cs.cs301.slidingpuzzle">PuzzleState</a></code></dd>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>row</code> - is an index in the range 0,1,..., dimension-1</dd>
<dd><code>column</code> - is an index in the range 0,1,..., dimension-1</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if this is an empty slot, false otherwise</dd>
</dl>
</li>
</ul>
<a name="hashCode--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>hashCode</h4>
<pre>public&nbsp;int&nbsp;hashCode()</pre>
<dl>
<dt><span class="overrideSpecifyLabel">Overrides:</span></dt>
<dd><code>hashCode</code>&nbsp;in class&nbsp;<code>java.lang.Object</code></dd>
</dl>
</li>
</ul>
<a name="equals-java.lang.Object-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>equals</h4>
<pre>public&nbsp;boolean&nbsp;equals(java.lang.Object&nbsp;obj)</pre>
<dl>
<dt><span class="overrideSpecifyLabel">Overrides:</span></dt>
<dd><code>equals</code>&nbsp;in class&nbsp;<code>java.lang.Object</code></dd>
</dl>
</li>
</ul>
<a name="toString--">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>toString</h4>
<pre>public&nbsp;java.lang.String&nbsp;toString()</pre>
<dl>
<dt><span class="overrideSpecifyLabel">Overrides:</span></dt>
<dd><code>toString</code>&nbsp;in class&nbsp;<code>java.lang.Object</code></dd>
</dl>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/SimplePuzzleState.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../../../../../deprecated-list.html">Deprecated</a></li>
<li><a href="../../../../../index-files/index-1.html">Index</a></li>
<li><a href="../../../../../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/PuzzleState.Operation.html" title="enum in edu.wm.cs.cs301.slidingpuzzle"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleState.Move.html" title="class in edu.wm.cs.cs301.slidingpuzzle"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="../../../../../index.html?edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleState.html" target="_top">Frames</a></li>
<li><a href="SimplePuzzleState.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="../../../../../allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li><a href="#nested.class.summary">Nested</a>&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>
