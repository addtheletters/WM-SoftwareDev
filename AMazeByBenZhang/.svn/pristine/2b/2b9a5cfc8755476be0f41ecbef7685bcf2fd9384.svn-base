package edu.wm.cs.cs301.benzhang.amazebybenzhang;

import android.content.DialogInterface;
import android.content.Intent;
import android.os.Handler;
import android.os.Looper;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.ProgressBar;
import android.widget.Toast;

import edu.wm.cs.cs301.benzhang.amazebybenzhang.falstad.BasicRobot;
import edu.wm.cs.cs301.benzhang.amazebybenzhang.falstad.BasicRobotDriver;
import edu.wm.cs.cs301.benzhang.amazebybenzhang.falstad.MazeController;
import edu.wm.cs.cs301.benzhang.amazebybenzhang.falstad.MazePanel;
import edu.wm.cs.cs301.benzhang.amazebybenzhang.falstad.Robot;
import edu.wm.cs.cs301.benzhang.amazebybenzhang.falstad.RobotDriver;
import edu.wm.cs.cs301.benzhang.amazebybenzhang.falstad.WallFollower;
import edu.wm.cs.cs301.benzhang.amazebybenzhang.falstad.Wizard;
import edu.wm.cs.cs301.benzhang.amazebybenzhang.generation.MazeConfiguration;

public class PlayActivity extends AppCompatActivity {

    private static final String TAG = "PlayActivity";

    public static final String FINISH_ENERGY = "maze.key.finish.energy";
    public static final String FINISH_STEPS = "maze.key.finish.steps";
    public static final String FAILURE_REASON = "maze.key.finish.reason";

    private BasicRobot robot;
    private BasicRobotDriver driver;
    private MazeController controller;

    public Handler handle = new Handler();
    //private Handler controllerHandle;

    private AlertDialog quitDialog;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_play);

        MazePanel panel = (MazePanel)this.findViewById(R.id.play_area_view);

        //maze = GeneratingActivity.mazeInfo;
        controller = new MazeController(SingleMazeHolder.maze, this, panel, handle);
        driver = makeDriver(getIntentDriver());
        if(driver != null) {
            controller.setDriver(driver);
        }

       // controller.init();
        // putting controller execution in separate thread may not be necessary, but whatever
        Thread controllerThread = new Thread(new Runnable() {
            @Override
            public void run() {
                controller.init();
            }
        });

        // TODO make map zoom in/out buttons

        // configure map control buttons
        final Button showMapBtn = (Button)findViewById(R.id.play_show_map_button);
        showMapBtn.setOnClickListener(new DebugButtonListener("show map"){
            @Override
            public void onClick(View view) {
                super.onClick(view);
                controller.toggleShowMap();
            }
        });
        final Button showWallsBtn = (Button)findViewById(R.id.play_show_walls_button);
        showWallsBtn.setOnClickListener(new DebugButtonListener("show walls"){
            @Override
            public void onClick(View view) {
                super.onClick(view);
                controller.toggleShowWalls();
            }
        });
        final Button showSolutionBtn = (Button)findViewById(R.id.play_show_solution_button);
        showSolutionBtn.setOnClickListener(new DebugButtonListener("show solution"){
            @Override
            public void onClick(View view) {
                super.onClick(view);
                controller.toggleShowSolution();
            }
        });

        // configure move buttons
        final Button forwardBtn = (Button) findViewById(R.id.play_forward_move_button);
        forwardBtn.setOnClickListener(new DebugButtonListener("move forward"){
            @Override
            public void onClick(View view) {
                super.onClick(view);
                //controller.walk(false);
//                controller.controllerHandle.post(new Runnable() {
//                    @Override
//                    public void run() {
//                        controller.walk(false);
//                    }
//                });
                new Thread(){
                    public void run(){
                        robot.move(1, true);
                        checkRobotOK();
                        //controller.forward();
                        //controller.walk(false);
                    }
                }.start();
            }
        });
        final Button backBtn = (Button) findViewById(R.id.play_back_move_button);
        backBtn.setOnClickListener(new DebugButtonListener("move back"){
            @Override
            public void onClick(View view) {
                super.onClick(view);
                //controller.walk(true);
                new Thread(){
                    public void run(){
                        robot.move(-1, true);
                        checkRobotOK();
                        //controller.back();
                       // controller.walk(true);
                    }
                }.start();
            }
        });
        final Button leftBtn = (Button) findViewById(R.id.play_left_move_button);
        leftBtn.setOnClickListener(new DebugButtonListener("turn left"){
            @Override
            public void onClick(View view) {
                super.onClick(view);
                //controller.left();
                //controller.rotate(Robot.Turn.RIGHT);
                new Thread(){
                    public void run(){
                        robot.rotate(Robot.Turn.RIGHT);
                        checkRobotOK();
                        //controller.left();
                        //controller.rotate(Robot.Turn.RIGHT);
                    }
                }.start();
            }
        });
        final Button rightBtn = (Button) findViewById(R.id.play_right_move_button);
        rightBtn.setOnClickListener(new DebugButtonListener("turn right"){
            @Override
            public void onClick(View view) {
                super.onClick(view);
                //controller.right();
                //controller.rotate(Robot.Turn.LEFT);
                new Thread(){
                    public void run(){
                        robot.rotate(Robot.Turn.LEFT);
                        checkRobotOK();
                        //controller.right();
                        //controller.rotate(Robot.Turn.LEFT);
                    }
                }.start();
            }
        });

//        // configure temporary 'finish' button
//        final Button finishBtn = (Button) findViewById(R.id.play_area_view);
//        finishBtn.setOnClickListener(new DebugButtonListener("placeholder: maze completed"){
//            @Override
//            public void onClick(View view) {
//                super.onClick(view);
//                // simulate finished maze
//                mazeFinished(false);
//            }
//        });
//        finishBtn.setOnLongClickListener(new DebugButtonListener("placeholder: maze failed"){
//            @Override
//            public boolean onLongClick(View view){
//                super.onClick(view);
//                // simulate failed maze
//                mazeFinished(true);
//                return true;
//            }
//        });

        setEnergyBarLevel(100);
        controllerThread.start();
    }

    private void checkRobotOK(){
        if(robot != null){
            if(robot.hasStopped()){
                handle.post(new Runnable() {
                    @Override
                    public void run() {
                        mazeFinished(true, "Robot stopped before exit reached.");
                    }
                });
            }
        }
    }

    /**
     * Gets the driver as set in the creating Intent.
     * @return string representing the driver
     */
    protected String getIntentDriver(){
        return getIntent().getStringExtra(AMazeActivity.DRIVER);
    }

    /**
     * Produce instance for the driver specified by string description
     * @return driver if one matches description, null if manual / none matches
     */
    protected BasicRobotDriver makeDriver(String driverName){
        robot = new BasicRobot();
        robot.setMaze(controller);
        BasicRobotDriver d = null;
        if(driverName.equalsIgnoreCase("WallFollower")){
            d = new WallFollower();
        }
        else if(driverName.equalsIgnoreCase("Wizard")){
            d = new Wizard();
        }
        if(d != null) {
            d.setRobot(robot);
        }
        return d;
    }

    /**
     * Wraps up, stops robots running
     */
    private void halt(){
        if(driver != null) {
            driver.kill();
        }
    }

    /**
     * Adds dialog requesting confirmation of quit when back button is pressed.
     */
    @Override
    public void onBackPressed() {
        quitDialog = new AlertDialog.Builder(this)
                .setMessage("Are you sure you want to quit?")
                .setCancelable(false)
                .setPositiveButton("Yes", new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int id) {
                        PlayActivity.this.finish();
                        halt();
                    }
                })
                .setNegativeButton("No", null)
                .create();
        quitDialog.show();
    }

    /**
     * Wraps up and switches to finished activity.
     * @param failed true if failed to reach exit; false if successfully completed maze
     */
    public void mazeFinished(boolean failed, String failureReason){
        if(quitDialog != null){
            quitDialog.dismiss();
        }
        Toast.makeText(PlayActivity.this, "Finished maze.", Toast.LENGTH_SHORT).show();
        Intent finishIntent = new Intent(this, FinishActivity.class);
        Bundle finishInfo = new Bundle();
        if(driver != null) {
            finishInfo.putFloat(FINISH_ENERGY, driver.getEnergyConsumption());
            finishInfo.putInt(FINISH_STEPS, driver.getPathLength());
            finishInfo.putString(AMazeActivity.DRIVER, driver.getClass().toString());
        }
        else if(robot != null){
            finishInfo.putFloat(FINISH_ENERGY, BasicRobot.INITIAL_BATTERY - robot.getBatteryLevel());
            finishInfo.putInt(FINISH_STEPS, robot.getOdometer());
        }
        if(failed){
            finishInfo.putString(FAILURE_REASON, failureReason);
        }
        finishIntent.putExtras(finishInfo);
        startActivity(finishIntent);

        finish();
    }

    /**
     * Sets the UI bar displaying energy remaining.
     * @param percentage the percent to set the bar to reflect, [0,100]
     */
    public void setEnergyBarLevel(int percentage){
        ProgressBar bar = (ProgressBar) findViewById(R.id.play_energy_bar);
        bar.setProgress(percentage);
    }

    /**
     * Gets the progress of the UI bar displaying remaining energy.
     * @return the percentage of the bar that is filled
     */
    private int getEnergyBarLevel(){
        ProgressBar bar = (ProgressBar) findViewById(R.id.play_energy_bar);
        return bar.getProgress();
    }

    /**
     * Listener for debug use in verifying that button inputs are registered.
     */
    private class DebugButtonListener implements View.OnClickListener, View.OnLongClickListener{
        private String name;
        public DebugButtonListener(String name){
            this.name = name;
        }
        @Override
        public void onClick(View view) {
            Log.v(TAG, "Registered '" + name + "' button pressed.");
            //Toast.makeText(PlayActivity.this, "Registered '" + name + "' button pressed.", Toast.LENGTH_SHORT).show();
//            if(getEnergyBarLevel() > 0) {
//                setEnergyBarLevel(getEnergyBarLevel() - 1);
//            }
        }

        @Override
        public boolean onLongClick(View view) {
            this.onClick(view);
            return true;
        }
    }
}
