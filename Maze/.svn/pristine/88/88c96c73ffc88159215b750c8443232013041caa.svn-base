<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="en">
<head>
<!-- Generated by javadoc (1.8.0_71) on Fri Jun 10 16:02:29 EDT 2016 -->
<title>MazeBuilderKruskalTest</title>
<meta name="date" content="2016-06-10">
<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
<script type="text/javascript" src="../script.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="MazeBuilderKruskalTest";
        }
    }
    catch(err) {
    }
//-->
var methods = {"i0":9,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10};
var tabs = {65535:["t0","All Methods"],1:["t1","Static Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../generation/package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/MazeBuilderKruskalTest.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../deprecated-list.html">Deprecated</a></li>
<li><a href="../index-files/index-1.html">Index</a></li>
<li><a href="../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../generation/MazeBuilderKruskal.html" title="class in generation"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="../generation/MazeFactoryTest.html" title="class in generation"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="../index.html?generation/MazeBuilderKruskalTest.html" target="_top">Frames</a></li>
<li><a href="MazeBuilderKruskalTest.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<div class="subTitle">generation</div>
<h2 title="Class MazeBuilderKruskalTest" class="title">Class MazeBuilderKruskalTest</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>generation.MazeBuilder</li>
<li>
<ul class="inheritance">
<li><a href="../generation/MazeBuilderKruskal.html" title="class in generation">generation.MazeBuilderKruskal</a></li>
<li>
<ul class="inheritance">
<li>generation.MazeBuilderKruskalTest</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<dl>
<dt>All Implemented Interfaces:</dt>
<dd>java.lang.Runnable</dd>
</dl>
<hr>
<br>
<pre>public class <span class="typeNameLabel">MazeBuilderKruskalTest</span>
extends <a href="../generation/MazeBuilderKruskal.html" title="class in generation">MazeBuilderKruskal</a></pre>
<div class="block">Provides tests for functions within <a href="../generation/MazeBuilderKruskal.html" title="class in generation"><code>MazeBuilderKruskal</code></a>.
 Also uses general maze-builder testing methods in <a href="../generation/MazeFactoryTest.html" title="class in generation"><code>MazeFactoryTest</code></a> to verify that MazeBuilderKruskal functions correctly
 and that a MazeFactory works properly with it. Each test verifies that the mazes generated by the Kruskal algorithm is a valid maze.</div>
<dl>
<dt><span class="simpleTagLabel">Author:</span></dt>
<dd>Ben Zhang</dd>
</dl>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- =========== FIELD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.summary">
<!--   -->
</a>
<h3>Field Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Field and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>private <a href="../generation/MazeFactoryTest.html" title="class in generation">MazeFactoryTest</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeBuilderKruskalTest.html#mft">mft</a></span></code>
<div class="block">Internal factory testing object whose assertions are used to verify correctness of Kruskal.</div>
</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="fields.inherited.from.class.generation.MazeBuilder">
<!--   -->
</a>
<h3>Fields inherited from class&nbsp;generation.MazeBuilder</h3>
<code>cells, dists, height, MAX_ROOM_DIMENSION, MAX_TRIES, MIN_ROOM_DIMENSION, order, random, SLEEP_INTERVAL, startx, starty, width</code></li>
</ul>
</li>
</ul>
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><span class="memberNameLink"><a href="../generation/MazeBuilderKruskalTest.html#MazeBuilderKruskalTest--">MazeBuilderKruskalTest</a></span>()</code>&nbsp;</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method.summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t1" class="tableTab"><span><a href="javascript:show(1);">Static Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr id="i0" class="altColor">
<td class="colFirst"><code>private static int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeBuilderKruskalTest.html#countTreeSize-java.util.HashMap-int-">countTreeSize</a></span>(java.util.HashMap&lt;java.awt.Point,java.lang.Integer&gt;&nbsp;forest,
             int&nbsp;tree)</code>
<div class="block">Counts the number of cells in a 'tree' as represented by a forest map.</div>
</td>
</tr>
<tr id="i1" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeBuilderKruskalTest.html#setUp--">setUp</a></span>()</code>
<div class="block">Initialize the internal factory testing object and prepare to run a test.</div>
</td>
</tr>
<tr id="i2" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeBuilderKruskalTest.html#testAddNeighborIfValid--">testAddNeighborIfValid</a></span>()</code>
<div class="block">Test that <a href="../generation/MazeBuilderKruskal.html#addNeighborIfValid-java.util.Collection-java.awt.Point-generation.CardinalDirection-java.util.HashMap-"><code>MazeBuilderKruskal.addNeighborIfValid(java.util.Collection, Point, CardinalDirection, HashMap)</code></a> correctly adds valid walls and ignores invalid walls.</div>
</td>
</tr>
<tr id="i3" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeBuilderKruskalTest.html#testCreateForest--">testCreateForest</a></span>()</code>
<div class="block">Test that a forest is correctly initialized with 1 cell per tree by <a href="../generation/MazeBuilderKruskal.html#createInitialForest--"><code>MazeBuilderKruskal.createInitialForest()</code></a>.</div>
</td>
</tr>
<tr id="i4" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeBuilderKruskalTest.html#testDeterministicKruskal--">testDeterministicKruskal</a></span>()</code>
<div class="block">Test that a deterministic factory using the Kruskal builder can correctly, consistently generate the same maze using <code>MazeFactoryTest#testDeterministic(Builder)</code>.</div>
</td>
</tr>
<tr id="i5" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeBuilderKruskalTest.html#testFindDestroyableWalls--">testFindDestroyableWalls</a></span>()</code>
<div class="block">Test that <a href="../generation/MazeBuilderKruskal.html#findTreeDestroyableWalls-int-java.util.HashMap-"><code>MazeBuilderKruskal.findTreeDestroyableWalls(int, HashMap)</code></a> correctly finds all valid walls to knock down of a tree.</div>
</td>
</tr>
<tr id="i6" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeBuilderKruskalTest.html#testJoinTree--">testJoinTree</a></span>()</code>
<div class="block">Test that <a href="../generation/MazeBuilderKruskal.html#joinTree-java.util.HashMap-int-int-"><code>MazeBuilderKruskal.joinTree(HashMap, int, int)</code></a> can modify the 'forest' to correctly reflect joined sets.</div>
</td>
</tr>
<tr id="i7" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeBuilderKruskalTest.html#testNonDeterministicKruskal--">testNonDeterministicKruskal</a></span>()</code>
<div class="block">Test that a non-deterministic factory using the Kruskal builder generates inconsistent mazes between runs using <code>MazeFactoryTest#testNonDeterministic(Builder)</code>.</div>
</td>
</tr>
<tr id="i8" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeBuilderKruskalTest.html#testOrderWhileBusyKruskal--">testOrderWhileBusyKruskal</a></span>()</code>
<div class="block">Test that a factory using the Kruskal builder correctly handles an order while busy using <code>MazeFactoryTest#testOrderWhileBusy(Builder)</code>.</div>
</td>
</tr>
<tr id="i9" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeBuilderKruskalTest.html#testPerfectImperfectKruskal--">testPerfectImperfectKruskal</a></span>()</code>
<div class="block">Test that a factory using the Kruskal builder correctly generates both perfect (no rooms) and imperfect (with rooms) mazes.</div>
</td>
</tr>
<tr id="i10" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeBuilderKruskalTest.html#testPointInCellGrid--">testPointInCellGrid</a></span>()</code>
<div class="block">Test that <a href="../generation/MazeBuilderKruskal.html#pointInCellGrid-java.awt.Point-"><code>MazeBuilderKruskal.pointInCellGrid(java.awt.Point)</code></a> evaluates points correctly.</div>
</td>
</tr>
<tr id="i11" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeBuilderKruskalTest.html#testSmoothCancelKruskal--">testSmoothCancelKruskal</a></span>()</code>
<div class="block">Test that a factory using the Kruskal builder correctly handles cancellation using <code>MazeFactoryTest#testSmoothCancel(Builder)</code>.</div>
</td>
</tr>
<tr id="i12" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeBuilderKruskalTest.html#testVaryingSkillKruskal--">testVaryingSkillKruskal</a></span>()</code>
<div class="block">Test that a factory using the Kruskal builder correctly handles generating varying skill levels of maze.</div>
</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.generation.MazeBuilderKruskal">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;generation.<a href="../generation/MazeBuilderKruskal.html" title="class in generation">MazeBuilderKruskal</a></h3>
<code><a href="../generation/MazeBuilderKruskal.html#addNeighborIfValid-java.util.Collection-java.awt.Point-generation.CardinalDirection-java.util.HashMap-">addNeighborIfValid</a>, <a href="../generation/MazeBuilderKruskal.html#createInitialForest--">createInitialForest</a>, <a href="../generation/MazeBuilderKruskal.html#findTreeDestroyableWalls-int-java.util.HashMap-">findTreeDestroyableWalls</a>, <a href="../generation/MazeBuilderKruskal.html#generatePathways--">generatePathways</a>, <a href="../generation/MazeBuilderKruskal.html#joinTree-java.util.HashMap-int-int-">joinTree</a>, <a href="../generation/MazeBuilderKruskal.html#pointInCellGrid-java.awt.Point-">pointInCellGrid</a></code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.generation.MazeBuilder">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;generation.MazeBuilder</h3>
<code>buildOrder, dbg, generate, generateRooms, getSign, run</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ============ FIELD DETAIL =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.detail">
<!--   -->
</a>
<h3>Field Detail</h3>
<a name="mft">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>mft</h4>
<pre>private&nbsp;<a href="../generation/MazeFactoryTest.html" title="class in generation">MazeFactoryTest</a> mft</pre>
<div class="block">Internal factory testing object whose assertions are used to verify correctness of Kruskal.
 Testing for Kruskal builder relies upon setup and methods of MazeFactoryTest.</div>
</li>
</ul>
</li>
</ul>
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="MazeBuilderKruskalTest--">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>MazeBuilderKruskalTest</h4>
<pre>public&nbsp;MazeBuilderKruskalTest()</pre>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method.detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="setUp--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setUp</h4>
<pre>public&nbsp;void&nbsp;setUp()</pre>
<div class="block">Initialize the internal factory testing object and prepare to run a test.</div>
</li>
</ul>
<a name="testPointInCellGrid--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testPointInCellGrid</h4>
<pre>public final&nbsp;void&nbsp;testPointInCellGrid()</pre>
<div class="block">Test that <a href="../generation/MazeBuilderKruskal.html#pointInCellGrid-java.awt.Point-"><code>MazeBuilderKruskal.pointInCellGrid(java.awt.Point)</code></a> evaluates points correctly.</div>
</li>
</ul>
<a name="testAddNeighborIfValid--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testAddNeighborIfValid</h4>
<pre>public final&nbsp;void&nbsp;testAddNeighborIfValid()</pre>
<div class="block">Test that <a href="../generation/MazeBuilderKruskal.html#addNeighborIfValid-java.util.Collection-java.awt.Point-generation.CardinalDirection-java.util.HashMap-"><code>MazeBuilderKruskal.addNeighborIfValid(java.util.Collection, Point, CardinalDirection, HashMap)</code></a> correctly adds valid walls and ignores invalid walls.</div>
</li>
</ul>
<a name="testCreateForest--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testCreateForest</h4>
<pre>public final&nbsp;void&nbsp;testCreateForest()</pre>
<div class="block">Test that a forest is correctly initialized with 1 cell per tree by <a href="../generation/MazeBuilderKruskal.html#createInitialForest--"><code>MazeBuilderKruskal.createInitialForest()</code></a>.</div>
</li>
</ul>
<a name="testJoinTree--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testJoinTree</h4>
<pre>public final&nbsp;void&nbsp;testJoinTree()</pre>
<div class="block">Test that <a href="../generation/MazeBuilderKruskal.html#joinTree-java.util.HashMap-int-int-"><code>MazeBuilderKruskal.joinTree(HashMap, int, int)</code></a> can modify the 'forest' to correctly reflect joined sets.</div>
</li>
</ul>
<a name="countTreeSize-java.util.HashMap-int-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>countTreeSize</h4>
<pre>private static&nbsp;int&nbsp;countTreeSize(java.util.HashMap&lt;java.awt.Point,java.lang.Integer&gt;&nbsp;forest,
                                 int&nbsp;tree)</pre>
<div class="block">Counts the number of cells in a 'tree' as represented by a forest map.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>forest</code> - the map describing the association of cells to trees</dd>
<dd><code>tree</code> - the number representing the tree whose cells are counted</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>the number of cells that belong to the tree</dd>
</dl>
</li>
</ul>
<a name="testFindDestroyableWalls--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testFindDestroyableWalls</h4>
<pre>public final&nbsp;void&nbsp;testFindDestroyableWalls()</pre>
<div class="block">Test that <a href="../generation/MazeBuilderKruskal.html#findTreeDestroyableWalls-int-java.util.HashMap-"><code>MazeBuilderKruskal.findTreeDestroyableWalls(int, HashMap)</code></a> correctly finds all valid walls to knock down of a tree.</div>
</li>
</ul>
<a name="testOrderWhileBusyKruskal--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testOrderWhileBusyKruskal</h4>
<pre>public final&nbsp;void&nbsp;testOrderWhileBusyKruskal()</pre>
<div class="block">Test that a factory using the Kruskal builder correctly handles an order while busy using <code>MazeFactoryTest#testOrderWhileBusy(Builder)</code>.</div>
</li>
</ul>
<a name="testPerfectImperfectKruskal--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testPerfectImperfectKruskal</h4>
<pre>public final&nbsp;void&nbsp;testPerfectImperfectKruskal()</pre>
<div class="block">Test that a factory using the Kruskal builder correctly generates both perfect (no rooms) and imperfect (with rooms) mazes.
 Uses <code>MazeFactoryTest#placeOrderAndWait(Builder, boolean)</code>.</div>
</li>
</ul>
<a name="testVaryingSkillKruskal--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testVaryingSkillKruskal</h4>
<pre>public final&nbsp;void&nbsp;testVaryingSkillKruskal()</pre>
<div class="block">Test that a factory using the Kruskal builder correctly handles generating varying skill levels of maze.
 Uses <code>MazeFactoryTest#testVaryingSkillLevels(Builder, boolean)</code>.</div>
</li>
</ul>
<a name="testSmoothCancelKruskal--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testSmoothCancelKruskal</h4>
<pre>public final&nbsp;void&nbsp;testSmoothCancelKruskal()</pre>
<div class="block">Test that a factory using the Kruskal builder correctly handles cancellation using <code>MazeFactoryTest#testSmoothCancel(Builder)</code>.</div>
</li>
</ul>
<a name="testDeterministicKruskal--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testDeterministicKruskal</h4>
<pre>public final&nbsp;void&nbsp;testDeterministicKruskal()</pre>
<div class="block">Test that a deterministic factory using the Kruskal builder can correctly, consistently generate the same maze using <code>MazeFactoryTest#testDeterministic(Builder)</code>.</div>
</li>
</ul>
<a name="testNonDeterministicKruskal--">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>testNonDeterministicKruskal</h4>
<pre>public final&nbsp;void&nbsp;testNonDeterministicKruskal()</pre>
<div class="block">Test that a non-deterministic factory using the Kruskal builder generates inconsistent mazes between runs using <code>MazeFactoryTest#testNonDeterministic(Builder)</code>.</div>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../generation/package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/MazeBuilderKruskalTest.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../deprecated-list.html">Deprecated</a></li>
<li><a href="../index-files/index-1.html">Index</a></li>
<li><a href="../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../generation/MazeBuilderKruskal.html" title="class in generation"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="../generation/MazeFactoryTest.html" title="class in generation"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="../index.html?generation/MazeBuilderKruskalTest.html" target="_top">Frames</a></li>
<li><a href="MazeBuilderKruskalTest.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>
