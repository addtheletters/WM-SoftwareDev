<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="en">
<head>
<!-- Generated by javadoc (1.8.0_71) on Fri Jun 10 16:02:29 EDT 2016 -->
<title>MazeBuilderKruskal</title>
<meta name="date" content="2016-06-10">
<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
<script type="text/javascript" src="../script.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="MazeBuilderKruskal";
        }
    }
    catch(err) {
    }
//-->
var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10};
var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../generation/package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/MazeBuilderKruskal.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../deprecated-list.html">Deprecated</a></li>
<li><a href="../index-files/index-1.html">Index</a></li>
<li><a href="../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li>Prev&nbsp;Class</li>
<li><a href="../generation/MazeBuilderKruskalTest.html" title="class in generation"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="../index.html?generation/MazeBuilderKruskal.html" target="_top">Frames</a></li>
<li><a href="MazeBuilderKruskal.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#fields.inherited.from.class.generation.MazeBuilder">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<div class="subTitle">generation</div>
<h2 title="Class MazeBuilderKruskal" class="title">Class MazeBuilderKruskal</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>generation.MazeBuilder</li>
<li>
<ul class="inheritance">
<li>generation.MazeBuilderKruskal</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<dl>
<dt>All Implemented Interfaces:</dt>
<dd>java.lang.Runnable</dd>
</dl>
<dl>
<dt>Direct Known Subclasses:</dt>
<dd><a href="../generation/MazeBuilderKruskalTest.html" title="class in generation">MazeBuilderKruskalTest</a></dd>
</dl>
<hr>
<br>
<pre>public class <span class="typeNameLabel">MazeBuilderKruskal</span>
extends generation.MazeBuilder</pre>
<div class="block">Provides an alternate method to create a maze with the given dimensions (width, height).
 
 <br>
 The focus of this class is its implementation of a variant of Kruskal's algorithm to join together cells into 'trees',
 accumulating into a single spanning tree which contains all cells. 
 <br>
 The cells are nodes of the graph and tree; edges represent where it is possible to move from one cell to a neighbor.
 An 'edge' then implies that two cells are adjacent and that the wall between them has been deleted.
 A 'tree' is more of a set than a tree, a group of cells which have been connected, and is stored as neither a set nor a tree.
 <br>
 A form of union-find structure is used to represent the 'forest' of trees, utilizing a HashMap and HashSet. 
 Each cell is initialized in its own 'tree' set; as cells are connected with 'edges' (walls between them are deleted) their 'tree' sets are union'ed together.
 <br>
 This implementation should respect rooms placed by the superclass methods.</div>
<dl>
<dt><span class="simpleTagLabel">Author:</span></dt>
<dd>Ben Zhang</dd>
</dl>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- =========== FIELD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.summary">
<!--   -->
</a>
<h3>Field Summary</h3>
<ul class="blockList">
<li class="blockList"><a name="fields.inherited.from.class.generation.MazeBuilder">
<!--   -->
</a>
<h3>Fields inherited from class&nbsp;generation.MazeBuilder</h3>
<code>cells, dists, height, MAX_ROOM_DIMENSION, MAX_TRIES, MIN_ROOM_DIMENSION, order, random, SLEEP_INTERVAL, startx, starty, width</code></li>
</ul>
</li>
</ul>
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><span class="memberNameLink"><a href="../generation/MazeBuilderKruskal.html#MazeBuilderKruskal--">MazeBuilderKruskal</a></span>()</code>
<div class="block">Default constructor creates a non-deterministic builder.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colOne"><code><span class="memberNameLink"><a href="../generation/MazeBuilderKruskal.html#MazeBuilderKruskal-boolean-">MazeBuilderKruskal</a></span>(boolean&nbsp;deterministic)</code>&nbsp;</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method.summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr id="i0" class="altColor">
<td class="colFirst"><code>protected void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeBuilderKruskal.html#addNeighborIfValid-java.util.Collection-java.awt.Point-generation.CardinalDirection-java.util.HashMap-">addNeighborIfValid</a></span>(java.util.Collection&lt;generation.Wall&gt;&nbsp;group,
                  java.awt.Point&nbsp;cell,
                  generation.CardinalDirection&nbsp;dir,
                  java.util.HashMap&lt;java.awt.Point,java.lang.Integer&gt;&nbsp;forest)</code>
<div class="block">Adds a wall specified by the cell and direction to the collection if it belongs to a different tree from the one provided.</div>
</td>
</tr>
<tr id="i1" class="rowColor">
<td class="colFirst"><code>protected java.util.HashMap&lt;java.awt.Point,java.lang.Integer&gt;</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeBuilderKruskal.html#createInitialForest--">createInitialForest</a></span>()</code>
<div class="block">Creates an initial HashMap of grid points to 'tree' numbers which will track the forest.</div>
</td>
</tr>
<tr id="i2" class="altColor">
<td class="colFirst"><code>protected java.util.List&lt;generation.Wall&gt;</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeBuilderKruskal.html#findTreeDestroyableWalls-int-java.util.HashMap-">findTreeDestroyableWalls</a></span>(int&nbsp;tree,
                        java.util.HashMap&lt;java.awt.Point,java.lang.Integer&gt;&nbsp;forest)</code>
<div class="block">Finds all maze walls bordering a tree which could be destroyed to link with another tree.</div>
</td>
</tr>
<tr id="i3" class="rowColor">
<td class="colFirst"><code>protected void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeBuilderKruskal.html#generatePathways--">generatePathways</a></span>()</code>
<div class="block">This method generates pathways into the maze by using a variant of Kruskal's algorithm.</div>
</td>
</tr>
<tr id="i4" class="altColor">
<td class="colFirst"><code>protected void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeBuilderKruskal.html#joinTree-java.util.HashMap-int-int-">joinTree</a></span>(java.util.HashMap&lt;java.awt.Point,java.lang.Integer&gt;&nbsp;forest,
        int&nbsp;baseTree,
        int&nbsp;joinTree)</code>
<div class="block">Joins the cells in joinTree to the cells in baseTree, similar to a set union operation.</div>
</td>
</tr>
<tr id="i5" class="rowColor">
<td class="colFirst"><code>protected boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeBuilderKruskal.html#pointInCellGrid-java.awt.Point-">pointInCellGrid</a></span>(java.awt.Point&nbsp;p)</code>
<div class="block">Checks that a point is within the maze's grid of cells.</div>
</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.generation.MazeBuilder">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;generation.MazeBuilder</h3>
<code>buildOrder, dbg, generate, generateRooms, getSign, run</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="MazeBuilderKruskal--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>MazeBuilderKruskal</h4>
<pre>public&nbsp;MazeBuilderKruskal()</pre>
<div class="block">Default constructor creates a non-deterministic builder.</div>
</li>
</ul>
<a name="MazeBuilderKruskal-boolean-">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>MazeBuilderKruskal</h4>
<pre>public&nbsp;MazeBuilderKruskal(boolean&nbsp;deterministic)</pre>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method.detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="generatePathways--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>generatePathways</h4>
<pre>protected&nbsp;void&nbsp;generatePathways()</pre>
<div class="block">This method generates pathways into the maze by using a variant of Kruskal's algorithm. Additional detail provided in class description (<a href="../generation/MazeBuilderKruskal.html" title="class in generation"><code>MazeBuilderKruskal</code></a>).</div>
<dl>
<dt><span class="overrideSpecifyLabel">Overrides:</span></dt>
<dd><code>generatePathways</code>&nbsp;in class&nbsp;<code>generation.MazeBuilder</code></dd>
</dl>
</li>
</ul>
<a name="createInitialForest--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>createInitialForest</h4>
<pre>protected&nbsp;java.util.HashMap&lt;java.awt.Point,java.lang.Integer&gt;&nbsp;createInitialForest()</pre>
<div class="block">Creates an initial HashMap of grid points to 'tree' numbers which will track the forest.</div>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>map of points to integers representing the forest</dd>
</dl>
</li>
</ul>
<a name="joinTree-java.util.HashMap-int-int-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>joinTree</h4>
<pre>protected&nbsp;void&nbsp;joinTree(java.util.HashMap&lt;java.awt.Point,java.lang.Integer&gt;&nbsp;forest,
                        int&nbsp;baseTree,
                        int&nbsp;joinTree)</pre>
<div class="block">Joins the cells in joinTree to the cells in baseTree, similar to a set union operation. See description of <a href="../generation/MazeBuilderKruskal.html#generatePathways--"><code>generatePathways()</code></a>.
 Resulting cells all have an identifying tree integer of baseTree.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>forest</code> - defines the forest by describing which tree each cell belongs to</dd>
<dd><code>baseTree</code> - the integer representing the base tree unto which the other tree will be joined</dd>
<dd><code>joinTree</code> - the integer representing the tree which will be joined to the base tree</dd>
</dl>
</li>
</ul>
<a name="findTreeDestroyableWalls-int-java.util.HashMap-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>findTreeDestroyableWalls</h4>
<pre>protected&nbsp;java.util.List&lt;generation.Wall&gt;&nbsp;findTreeDestroyableWalls(int&nbsp;tree,
                                                                   java.util.HashMap&lt;java.awt.Point,java.lang.Integer&gt;&nbsp;forest)</pre>
<div class="block">Finds all maze walls bordering a tree which could be destroyed to link with another tree.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>tree</code> - the integer representing the tree to be examined</dd>
<dd><code>forest</code> - defines the forest by describing which tree each cell belongs to</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>list of all valid walls neighboring any of the tree's cells</dd>
</dl>
</li>
</ul>
<a name="addNeighborIfValid-java.util.Collection-java.awt.Point-generation.CardinalDirection-java.util.HashMap-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>addNeighborIfValid</h4>
<pre>protected&nbsp;void&nbsp;addNeighborIfValid(java.util.Collection&lt;generation.Wall&gt;&nbsp;group,
                                  java.awt.Point&nbsp;cell,
                                  generation.CardinalDirection&nbsp;dir,
                                  java.util.HashMap&lt;java.awt.Point,java.lang.Integer&gt;&nbsp;forest)</pre>
<div class="block">Adds a wall specified by the cell and direction to the collection if it belongs to a different tree from the one provided.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>group</code> - the collection which valid walls will be added to</dd>
<dd><code>cell</code> - the central cell</dd>
<dd><code>dir</code> - the direction in which to attempt to find a valid wall</dd>
<dd><code>forest</code> - defines the forest by describing which tree each cell belongs to</dd>
</dl>
</li>
</ul>
<a name="pointInCellGrid-java.awt.Point-">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>pointInCellGrid</h4>
<pre>protected&nbsp;boolean&nbsp;pointInCellGrid(java.awt.Point&nbsp;p)</pre>
<div class="block">Checks that a point is within the maze's grid of cells.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>p</code> - the point to check</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if the point is within the space of the grid; false otherwise</dd>
</dl>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../generation/package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/MazeBuilderKruskal.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../deprecated-list.html">Deprecated</a></li>
<li><a href="../index-files/index-1.html">Index</a></li>
<li><a href="../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li>Prev&nbsp;Class</li>
<li><a href="../generation/MazeBuilderKruskalTest.html" title="class in generation"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="../index.html?generation/MazeBuilderKruskal.html" target="_top">Frames</a></li>
<li><a href="MazeBuilderKruskal.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#fields.inherited.from.class.generation.MazeBuilder">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>
