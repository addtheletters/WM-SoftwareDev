package falstad;

import java.awt.Point;

import generation.CardinalDirection;

/**
 * Basic implementation of Robot, with complete sensor suite.
 * 
 * CRC card:
 * 
 * BasicRobot (Robot)
 * 
 * Responsibilities:
 * Movement (turning, stepping forwards) in maze
 * Sensor information about surroundings
 * Track battery capacity 
 * 
 * Collaborators:
 * RobotDriver to control the robot
 * MazeController to drive through 
 * 
 * @author Ben
 *
 */
public class BasicRobot implements Robot {
	
	
	private static final float INITIAL_BATTERY = 2500;
	private static final float DISTANCE_SENSE_COST = 1;
	private static final float ROTATE_360_COST = 12;
	private static final float MOVE_COST = 5;
	/*
	 The initial battery level is 2500.
	• The energy costs are:
	• Distance sensing in one direction: 1
	• Rotating left or right: 3 for 90 degrees, 6 for 180 degrees, 12 for 360 degrees
	• Moving forward one step (one cell): 5
	 */
	
	// current position
	// current direction
	// battery life remaining
	// 'stopped' value?
	private MazeController maze;
	
	private Point position;
	private CardinalDirection facing;
	private float battery;
	private boolean stopped;
	
	public BasicRobot(MazeController controller){
		maze = controller;
		
		int[] pos = maze.getCurrentPosition();
		position = new Point(pos[0], pos[1]);
		facing = maze.getCurrentDirection();
		battery = INITIAL_BATTERY;
		stopped = false;
	}
	
	@Override
	public void rotate(Turn turn) {
		switch(turn){
		case LEFT:
			facing = facing.rotateCounterCW();
			maze.rotate(Turn.LEFT);
			break;
		case RIGHT:
			facing = facing.rotateClockwise();
			maze.rotate(Turn.RIGHT);
			break;
		case AROUND:
			facing = facing.oppositeDirection();
			maze.rotate(Turn.AROUND);
		default:
			System.err.println("Bad turn enum.");
		}
	}

	@Override
	public void move(int distance, boolean manual) {
		for(int i = 0; i < distance; i++){
			
			
		}
	}

	@Override
	public int[] getCurrentPosition() throws Exception {
		return new int[] {position.x, position.y};
	}

	@Override
	public void setMaze(MazeController maze) {
		this.maze = maze;
	}

	@Override
	public boolean isAtGoal() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean canSeeGoal(Direction direction) throws UnsupportedOperationException {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean isInsideRoom() throws UnsupportedOperationException {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean hasRoomSensor() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public CardinalDirection getCurrentDirection() {
		return facing;
	}

	@Override
	public float getBatteryLevel() {
		return battery;
	}

	@Override
	public void setBatteryLevel(float level) {
		if(level < 0){
			System.err.println("BasicRobot: Battery level should not be negative.");
		}
		this.battery = level;
	}

	@Override
	public float getEnergyForFullRotation() {
		return ROTATE_360_COST;
	}

	@Override
	public float getEnergyForStepForward() {
		return MOVE_COST;
	}

	@Override
	public boolean hasStopped() {
		return stopped;
	}

	@Override
	public int distanceToObstacle(Direction direction) throws UnsupportedOperationException {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public boolean hasDistanceSensor(Direction direction) {
		// TODO Auto-generated method stub
		return false;
	}

}
