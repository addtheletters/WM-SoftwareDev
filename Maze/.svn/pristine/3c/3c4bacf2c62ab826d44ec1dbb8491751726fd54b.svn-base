<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="en">
<head>
<!-- Generated by javadoc (1.8.0_71) on Fri Jun 10 16:55:39 EDT 2016 -->
<title>MazeFactoryTest</title>
<meta name="date" content="2016-06-10">
<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
<script type="text/javascript" src="../script.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="MazeFactoryTest";
        }
    }
    catch(err) {
    }
//-->
var methods = {"i0":9,"i1":9,"i2":9,"i3":9,"i4":9,"i5":9,"i6":9,"i7":10,"i8":9,"i9":9,"i10":10,"i11":9,"i12":9,"i13":9,"i14":9,"i15":10,"i16":10,"i17":10,"i18":10,"i19":10,"i20":10,"i21":10,"i22":10,"i23":10,"i24":10,"i25":10,"i26":10,"i27":10,"i28":10,"i29":10,"i30":10,"i31":10,"i32":10};
var tabs = {65535:["t0","All Methods"],1:["t1","Static Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../generation/package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/MazeFactoryTest.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../deprecated-list.html">Deprecated</a></li>
<li><a href="../index-files/index-1.html">Index</a></li>
<li><a href="../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../generation/MazeBuilderKruskalTest.html" title="class in generation"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="../generation/TestOrder.html" title="class in generation"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="../index.html?generation/MazeFactoryTest.html" target="_top">Frames</a></li>
<li><a href="MazeFactoryTest.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<div class="subTitle">generation</div>
<h2 title="Class MazeFactoryTest" class="title">Class MazeFactoryTest</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>generation.MazeFactoryTest</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<hr>
<br>
<pre>public class <span class="typeNameLabel">MazeFactoryTest</span>
extends java.lang.Object</pre>
<div class="block">Contains JUnit tests which verify that a maze Builder produces valid mazes when used with a MazeFactory.
 Tests check that deterministic factories are consistent and nondeterministic ones are inconsistent.
 
 Specifically, this class runs tests on the default maze generator, Builder.DFS, but it could easily be adapted to test others.</div>
<dl>
<dt><span class="simpleTagLabel">Author:</span></dt>
<dd>Ben Zhang</dd>
</dl>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- =========== FIELD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.summary">
<!--   -->
</a>
<h3>Field Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Field and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>private generation.MazeFactory</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeFactoryTest.html#deterministicFactory">deterministicFactory</a></span></code>
<div class="block">A factory initialized in setup to be deterministic.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeFactoryTest.html#MAX_SKILL">MAX_SKILL</a></span></code>
<div class="block">The highest skill level to be tested when checking that varying skill levels are handled.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeFactoryTest.html#ORDER_SKILL">ORDER_SKILL</a></span></code>
<div class="block">The skill level with which to place all orders.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>private generation.MazeFactory</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeFactoryTest.html#randomFactory">randomFactory</a></span></code>
<div class="block">A factory initialized in setup to be non-deterministic.</div>
</td>
</tr>
</table>
</li>
</ul>
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><span class="memberNameLink"><a href="../generation/MazeFactoryTest.html#MazeFactoryTest--">MazeFactoryTest</a></span>()</code>&nbsp;</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method.summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t1" class="tableTab"><span><a href="javascript:show(1);">Static Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr id="i0" class="altColor">
<td class="colFirst"><code>private static boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeFactoryTest.html#allDistancesExist-generation.MazeConfiguration-">allDistancesExist</a></span>(generation.MazeConfiguration&nbsp;mazeConfig)</code>
<div class="block">Checks if all tiles in the maze configuration have been labeled with a valid distance from the exit.</div>
</td>
</tr>
<tr id="i1" class="rowColor">
<td class="colFirst"><code>static void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeFactoryTest.html#checkMazeValid-generation.MazeConfiguration-">checkMazeValid</a></span>(generation.MazeConfiguration&nbsp;mazeConfig)</code>
<div class="block">Attempts several assertions to check that the maze configuration is valid.</div>
</td>
</tr>
<tr id="i2" class="altColor">
<td class="colFirst"><code>static void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeFactoryTest.html#checkSingleExit-generation.MazeConfiguration-">checkSingleExit</a></span>(generation.MazeConfiguration&nbsp;mazeConfig)</code>
<div class="block">Asserts that the maze is properly constructed with only a single exit.</div>
</td>
</tr>
<tr id="i3" class="rowColor">
<td class="colFirst"><code>static void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeFactoryTest.html#checkSolveableFromEverywhere-generation.MazeConfiguration-">checkSolveableFromEverywhere</a></span>(generation.MazeConfiguration&nbsp;mazeConfig)</code>
<div class="block">Asserts that a solution for a maze exists from every position within the maze.</div>
</td>
</tr>
<tr id="i4" class="altColor">
<td class="colFirst"><code>static <a href="../generation/TestOrder.html" title="class in generation">TestOrder</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeFactoryTest.html#constructTestOrder-generation.Order.Builder-boolean-">constructTestOrder</a></span>(generation.Order.Builder&nbsp;builder,
                  boolean&nbsp;perfect)</code>
<div class="block">Shortcut for <code>MazeFactoryTest#constructTestOrder(Builder, boolean, int)</code> with skill determined by constant.</div>
</td>
</tr>
<tr id="i5" class="rowColor">
<td class="colFirst"><code>static <a href="../generation/TestOrder.html" title="class in generation">TestOrder</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeFactoryTest.html#constructTestOrder-generation.Order.Builder-boolean-int-">constructTestOrder</a></span>(generation.Order.Builder&nbsp;builder,
                  boolean&nbsp;perfect,
                  int&nbsp;skill)</code>
<div class="block">Constructs a TestOrder object using static constants and the parameters given.</div>
</td>
</tr>
<tr id="i6" class="altColor">
<td class="colFirst"><code>static boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeFactoryTest.html#isSolveableFrom-generation.MazeConfiguration-int:A-">isSolveableFrom</a></span>(generation.MazeConfiguration&nbsp;mazeConfig,
               int[]&nbsp;start)</code>
<div class="block">Checks if a solution for a maze is specified from the provided position by following
 <code>MazeConfiguration.getNeighborCloserToExit(int, int)</code>.</div>
</td>
</tr>
<tr id="i7" class="rowColor">
<td class="colFirst"><code><a href="../generation/TestOrder.html" title="class in generation">TestOrder</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeFactoryTest.html#placeOrder-generation.Order.Builder-boolean-">placeOrder</a></span>(generation.Order.Builder&nbsp;builder,
          boolean&nbsp;perfect)</code>
<div class="block">Shortcut default to non-deterministic factory for <code>MazeFactoryTest#placeOrder(Builder, boolean, MazeFactory)</code>.</div>
</td>
</tr>
<tr id="i8" class="altColor">
<td class="colFirst"><code>static <a href="../generation/TestOrder.html" title="class in generation">TestOrder</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeFactoryTest.html#placeOrder-generation.Order.Builder-boolean-generation.MazeFactory-">placeOrder</a></span>(generation.Order.Builder&nbsp;builder,
          boolean&nbsp;perfect,
          generation.MazeFactory&nbsp;factory)</code>
<div class="block">Shortcut for <code>MazeFactoryTest#placeOrder(Builder, boolean, MazeFactory, int)</code> with skill level determined by local constant.</div>
</td>
</tr>
<tr id="i9" class="rowColor">
<td class="colFirst"><code>static <a href="../generation/TestOrder.html" title="class in generation">TestOrder</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeFactoryTest.html#placeOrder-generation.Order.Builder-boolean-generation.MazeFactory-int-">placeOrder</a></span>(generation.Order.Builder&nbsp;builder,
          boolean&nbsp;perfect,
          generation.MazeFactory&nbsp;factory,
          int&nbsp;skill)</code>
<div class="block">Creates an order using the provided builder and perfection setting and starts the factory working on it.</div>
</td>
</tr>
<tr id="i10" class="altColor">
<td class="colFirst"><code><a href="../generation/TestOrder.html" title="class in generation">TestOrder</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeFactoryTest.html#placeOrderAndWait-generation.Order.Builder-boolean-">placeOrderAndWait</a></span>(generation.Order.Builder&nbsp;builder,
                 boolean&nbsp;perfect)</code>
<div class="block">Shortcut default to non-deterministic factory for <code>MazeFactoryTest#placeOrderAndWait(Builder, boolean, MazeFactory)</code>.</div>
</td>
</tr>
<tr id="i11" class="rowColor">
<td class="colFirst"><code>static <a href="../generation/TestOrder.html" title="class in generation">TestOrder</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeFactoryTest.html#placeOrderAndWait-generation.Order.Builder-boolean-generation.MazeFactory-">placeOrderAndWait</a></span>(generation.Order.Builder&nbsp;builder,
                 boolean&nbsp;perfect,
                 generation.MazeFactory&nbsp;factory)</code>
<div class="block">Shortcut for <code>MazeFactoryTest#placeOrderAndWait(Builder, boolean, MazeFactory, int)</code> with skill set as the local constant.</div>
</td>
</tr>
<tr id="i12" class="altColor">
<td class="colFirst"><code>static <a href="../generation/TestOrder.html" title="class in generation">TestOrder</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeFactoryTest.html#placeOrderAndWait-generation.Order.Builder-boolean-generation.MazeFactory-int-">placeOrderAndWait</a></span>(generation.Order.Builder&nbsp;builder,
                 boolean&nbsp;perfect,
                 generation.MazeFactory&nbsp;factory,
                 int&nbsp;skill)</code>
<div class="block">Create an order, starts the factory working on it, waits for completion, and then validates the result.</div>
</td>
</tr>
<tr id="i13" class="rowColor">
<td class="colFirst"><code>static void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeFactoryTest.html#prettyPrintDistances-generation.MazeConfiguration-">prettyPrintDistances</a></span>(generation.MazeConfiguration&nbsp;mazeConfig)</code>
<div class="block">Displays the distances to the exit of all maze cells in a neat grid.</div>
</td>
</tr>
<tr id="i14" class="altColor">
<td class="colFirst"><code>static int[]</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeFactoryTest.html#randomMazePosition-generation.MazeConfiguration-">randomMazePosition</a></span>(generation.MazeConfiguration&nbsp;mazeConfig)</code>
<div class="block">Picks a random position within the maze.</div>
</td>
</tr>
<tr id="i15" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeFactoryTest.html#setUp--">setUp</a></span>()</code>
<div class="block">Initialize factories as preparation before all tests.</div>
</td>
</tr>
<tr id="i16" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeFactoryTest.html#testDeterministic-generation.Order.Builder-">testDeterministic</a></span>(generation.Order.Builder&nbsp;builder)</code>
<div class="block">Test that a builder generates mazes consistently when in a deterministic factory.</div>
</td>
</tr>
<tr id="i17" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeFactoryTest.html#testDeterministicDFS--">testDeterministicDFS</a></span>()</code>
<div class="block">Test that DFS generates mazes consistently when used in a deterministic factory using <code>MazeFactoryTest#testDeterministic(Builder)</code>.</div>
</td>
</tr>
<tr id="i18" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeFactoryTest.html#testDeterministicPrim--">testDeterministicPrim</a></span>()</code>
<div class="block">Test that Prim generates mazes consistently when used in a deterministic factory using <code>MazeFactoryTest#testDeterministic(Builder)</code>.</div>
</td>
</tr>
<tr id="i19" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeFactoryTest.html#testNonDeterministic-generation.Order.Builder-">testNonDeterministic</a></span>(generation.Order.Builder&nbsp;builder)</code>
<div class="block">Test to make sure random factory indeed produces inconsistent results.</div>
</td>
</tr>
<tr id="i20" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeFactoryTest.html#testNonDeterministicDFS--">testNonDeterministicDFS</a></span>()</code>
<div class="block">Test that DFS with non-deterministic factory generates inconsistent mazes using <code>MazeFactoryTest#testNonDeterministic(Builder)</code>.</div>
</td>
</tr>
<tr id="i21" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeFactoryTest.html#testNonDeterministicPrim--">testNonDeterministicPrim</a></span>()</code>
<div class="block">Test that Prim with non-deterministic factory generates inconsistent mazes using <code>MazeFactoryTest#testNonDeterministic(Builder)</code>.</div>
</td>
</tr>
<tr id="i22" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeFactoryTest.html#testOrderWhileBusy-generation.Order.Builder-">testOrderWhileBusy</a></span>(generation.Order.Builder&nbsp;builder)</code>
<div class="block">Test that a builder correctly ignores a second order while busy.</div>
</td>
</tr>
<tr id="i23" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeFactoryTest.html#testOrderWhileBusyDFS--">testOrderWhileBusyDFS</a></span>()</code>
<div class="block">Test that DFS builder correctly ignores an order while busy using <code>MazeFactoryTest#testOrderWhileBusy(Builder)</code>.</div>
</td>
</tr>
<tr id="i24" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeFactoryTest.html#testOrderWhileBusyPrim--">testOrderWhileBusyPrim</a></span>()</code>
<div class="block">Test that Prim builder correctly ignores an order while busy using <code>MazeFactoryTest#testOrderWhileBusy(Builder)</code>.</div>
</td>
</tr>
<tr id="i25" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeFactoryTest.html#testPerfectImperfectDFS--">testPerfectImperfectDFS</a></span>()</code>
<div class="block">Test to check that DFS creates a successful maze for both a 'perfect' (no rooms) and 'imperfect' (rooms) specification.</div>
</td>
</tr>
<tr id="i26" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeFactoryTest.html#testPerfectImperfectPrim--">testPerfectImperfectPrim</a></span>()</code>
<div class="block">Test to check that Prim creates a successful maze for both a 'perfect' (no rooms) and 'imperfect' (rooms) specification.</div>
</td>
</tr>
<tr id="i27" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeFactoryTest.html#testSmoothCancel-generation.Order.Builder-">testSmoothCancel</a></span>(generation.Order.Builder&nbsp;builder)</code>
<div class="block">Test that a builder can fulfill an order correctly after one has been cancelled.</div>
</td>
</tr>
<tr id="i28" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeFactoryTest.html#testSmoothCancelDFS--">testSmoothCancelDFS</a></span>()</code>
<div class="block">Test that DFS can fulfill an order correctly after one has been cancelled using <code>MazeFactoryTest#testSmoothCancel(Builder)</code>.</div>
</td>
</tr>
<tr id="i29" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeFactoryTest.html#testSmoothCancelPrim--">testSmoothCancelPrim</a></span>()</code>
<div class="block">Test that Prim can fulfill an order correctly after one has been cancelled using <code>MazeFactoryTest#testSmoothCancel(Builder)</code>.</div>
</td>
</tr>
<tr id="i30" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeFactoryTest.html#testVaryingSkillDFS--">testVaryingSkillDFS</a></span>()</code>
<div class="block">Test that the DFS builder handles varying skill levels.</div>
</td>
</tr>
<tr id="i31" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeFactoryTest.html#testVaryingSkillLevels-generation.Order.Builder-boolean-">testVaryingSkillLevels</a></span>(generation.Order.Builder&nbsp;builder,
                      boolean&nbsp;perfect)</code>
<div class="block">Test that a builder handles different skill levels</div>
</td>
</tr>
<tr id="i32" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeFactoryTest.html#testVaryingSkillPrim--">testVaryingSkillPrim</a></span>()</code>
<div class="block">Test that the Prim builder handles varying skill levels.</div>
</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ============ FIELD DETAIL =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.detail">
<!--   -->
</a>
<h3>Field Detail</h3>
<a name="ORDER_SKILL">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>ORDER_SKILL</h4>
<pre>public static final&nbsp;int ORDER_SKILL</pre>
<div class="block">The skill level with which to place all orders.
 For high numbers, will cause all tests to take significant time.</div>
<dl>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="../constant-values.html#generation.MazeFactoryTest.ORDER_SKILL">Constant Field Values</a></dd>
</dl>
</li>
</ul>
<a name="MAX_SKILL">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>MAX_SKILL</h4>
<pre>public static final&nbsp;int MAX_SKILL</pre>
<div class="block">The highest skill level to be tested when checking that varying skill levels are handled. 
 For high numbers, will cause the varying-skill test to take significant time.</div>
<dl>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="../constant-values.html#generation.MazeFactoryTest.MAX_SKILL">Constant Field Values</a></dd>
</dl>
</li>
</ul>
<a name="deterministicFactory">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>deterministicFactory</h4>
<pre>private&nbsp;generation.MazeFactory deterministicFactory</pre>
<div class="block">A factory initialized in setup to be deterministic.</div>
</li>
</ul>
<a name="randomFactory">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>randomFactory</h4>
<pre>private&nbsp;generation.MazeFactory randomFactory</pre>
<div class="block">A factory initialized in setup to be non-deterministic.</div>
</li>
</ul>
</li>
</ul>
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="MazeFactoryTest--">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>MazeFactoryTest</h4>
<pre>public&nbsp;MazeFactoryTest()</pre>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method.detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="setUp--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setUp</h4>
<pre>public&nbsp;void&nbsp;setUp()</pre>
<div class="block">Initialize factories as preparation before all tests.</div>
</li>
</ul>
<a name="constructTestOrder-generation.Order.Builder-boolean-int-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>constructTestOrder</h4>
<pre>public static&nbsp;<a href="../generation/TestOrder.html" title="class in generation">TestOrder</a>&nbsp;constructTestOrder(generation.Order.Builder&nbsp;builder,
                                           boolean&nbsp;perfect,
                                           int&nbsp;skill)</pre>
<div class="block">Constructs a TestOrder object using static constants and the parameters given.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>builder</code> - The builder the order will specify</dd>
<dd><code>perfect</code> - true to specify a perfect (no holes or extra rooms) order, false otherwise.</dd>
<dd><code>skill</code> - The skill level</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A TestOrder object holding the specified values</dd>
</dl>
</li>
</ul>
<a name="constructTestOrder-generation.Order.Builder-boolean-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>constructTestOrder</h4>
<pre>public static&nbsp;<a href="../generation/TestOrder.html" title="class in generation">TestOrder</a>&nbsp;constructTestOrder(generation.Order.Builder&nbsp;builder,
                                           boolean&nbsp;perfect)</pre>
<div class="block">Shortcut for <code>MazeFactoryTest#constructTestOrder(Builder, boolean, int)</code> with skill determined by constant.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>builder</code> - The builder the order will specify</dd>
<dd><code>perfect</code> - true to specify a perfect (no holes or extra rooms) order, false otherwise.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A TestOrder object holding the specified values</dd>
</dl>
</li>
</ul>
<a name="allDistancesExist-generation.MazeConfiguration-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>allDistancesExist</h4>
<pre>private static&nbsp;boolean&nbsp;allDistancesExist(generation.MazeConfiguration&nbsp;mazeConfig)</pre>
<div class="block">Checks if all tiles in the maze configuration have been labeled with a valid distance from the exit.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>mazeConfig</code> - configuration of the maze</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if all tiles have a valid distance; false otherwise</dd>
</dl>
</li>
</ul>
<a name="prettyPrintDistances-generation.MazeConfiguration-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>prettyPrintDistances</h4>
<pre>public static&nbsp;void&nbsp;prettyPrintDistances(generation.MazeConfiguration&nbsp;mazeConfig)</pre>
<div class="block">Displays the distances to the exit of all maze cells in a neat grid.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>mazeConfig</code> - configuration of the maze</dd>
</dl>
</li>
</ul>
<a name="isSolveableFrom-generation.MazeConfiguration-int:A-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isSolveableFrom</h4>
<pre>public static&nbsp;boolean&nbsp;isSolveableFrom(generation.MazeConfiguration&nbsp;mazeConfig,
                                      int[]&nbsp;start)</pre>
<div class="block">Checks if a solution for a maze is specified from the provided position by following
 <code>MazeConfiguration.getNeighborCloserToExit(int, int)</code>.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>mazeConfig</code> - configuration of the maze</dd>
<dd><code>position</code> - array of length 2 holding the (x,y) of the start position</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>true if the solution can be verified; false if it fails</dd>
</dl>
</li>
</ul>
<a name="checkSolveableFromEverywhere-generation.MazeConfiguration-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>checkSolveableFromEverywhere</h4>
<pre>public static&nbsp;void&nbsp;checkSolveableFromEverywhere(generation.MazeConfiguration&nbsp;mazeConfig)</pre>
<div class="block">Asserts that a solution for a maze exists from every position within the maze.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>mazeConfig</code> - configuration of the maze</dd>
</dl>
</li>
</ul>
<a name="checkSingleExit-generation.MazeConfiguration-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>checkSingleExit</h4>
<pre>public static&nbsp;void&nbsp;checkSingleExit(generation.MazeConfiguration&nbsp;mazeConfig)</pre>
<div class="block">Asserts that the maze is properly constructed with only a single exit.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>mazeConfig</code> - configuration of the maze</dd>
</dl>
</li>
</ul>
<a name="randomMazePosition-generation.MazeConfiguration-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>randomMazePosition</h4>
<pre>public static&nbsp;int[]&nbsp;randomMazePosition(generation.MazeConfiguration&nbsp;mazeConfig)</pre>
<div class="block">Picks a random position within the maze.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>mazeConfig</code> - configuration of the maze</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>int array of length 2 holding (x,y) random position</dd>
</dl>
</li>
</ul>
<a name="checkMazeValid-generation.MazeConfiguration-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>checkMazeValid</h4>
<pre>public static&nbsp;void&nbsp;checkMazeValid(generation.MazeConfiguration&nbsp;mazeConfig)</pre>
<div class="block">Attempts several assertions to check that the maze configuration is valid.
 Checks that all maze tiles have been set with a distance to the exit.
 Checks that the maze is solvable from a everywhere within.
 Checks that there is only a single exit.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>mazeConfig</code> - configuration of the maze</dd>
</dl>
</li>
</ul>
<a name="placeOrder-generation.Order.Builder-boolean-generation.MazeFactory-int-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>placeOrder</h4>
<pre>public static final&nbsp;<a href="../generation/TestOrder.html" title="class in generation">TestOrder</a>&nbsp;placeOrder(generation.Order.Builder&nbsp;builder,
                                         boolean&nbsp;perfect,
                                         generation.MazeFactory&nbsp;factory,
                                         int&nbsp;skill)</pre>
<div class="block">Creates an order using the provided builder and perfection setting and starts the factory working on it.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>builder</code> - The maze builder to use</dd>
<dd><code>perfect</code> - true for a perfect maze; false otherwise</dd>
<dd><code>factory</code> - The factory with which to place the order</dd>
<dd><code>skill</code> - The skill level to use</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>the order that was placed</dd>
</dl>
</li>
</ul>
<a name="placeOrder-generation.Order.Builder-boolean-generation.MazeFactory-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>placeOrder</h4>
<pre>public static final&nbsp;<a href="../generation/TestOrder.html" title="class in generation">TestOrder</a>&nbsp;placeOrder(generation.Order.Builder&nbsp;builder,
                                         boolean&nbsp;perfect,
                                         generation.MazeFactory&nbsp;factory)</pre>
<div class="block">Shortcut for <code>MazeFactoryTest#placeOrder(Builder, boolean, MazeFactory, int)</code> with skill level determined by local constant.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>builder</code> - The maze builder to use</dd>
<dd><code>perfect</code> - true for a perfect maze; false otherwise</dd>
<dd><code>factory</code> - The factory with which to place the order</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>the order that was placed</dd>
</dl>
</li>
</ul>
<a name="placeOrderAndWait-generation.Order.Builder-boolean-generation.MazeFactory-int-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>placeOrderAndWait</h4>
<pre>public static final&nbsp;<a href="../generation/TestOrder.html" title="class in generation">TestOrder</a>&nbsp;placeOrderAndWait(generation.Order.Builder&nbsp;builder,
                                                boolean&nbsp;perfect,
                                                generation.MazeFactory&nbsp;factory,
                                                int&nbsp;skill)</pre>
<div class="block">Create an order, starts the factory working on it, waits for completion, and then validates the result.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>builder</code> - The maze builder to use</dd>
<dd><code>perfect</code> - true for a perfect maze; false otherwise</dd>
<dd><code>factory</code> - The factory with which to place the order</dd>
<dd><code>skill</code> - The skill level to use</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>the order that was placed, should be completed when returned</dd>
</dl>
</li>
</ul>
<a name="placeOrderAndWait-generation.Order.Builder-boolean-generation.MazeFactory-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>placeOrderAndWait</h4>
<pre>public static final&nbsp;<a href="../generation/TestOrder.html" title="class in generation">TestOrder</a>&nbsp;placeOrderAndWait(generation.Order.Builder&nbsp;builder,
                                                boolean&nbsp;perfect,
                                                generation.MazeFactory&nbsp;factory)</pre>
<div class="block">Shortcut for <code>MazeFactoryTest#placeOrderAndWait(Builder, boolean, MazeFactory, int)</code> with skill set as the local constant.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>builder</code> - The maze builder to use</dd>
<dd><code>perfect</code> - true for a perfect maze; false otherwise</dd>
<dd><code>factory</code> - The factory with which to place the order</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>the order that was placed, should be completed when returned</dd>
</dl>
</li>
</ul>
<a name="placeOrder-generation.Order.Builder-boolean-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>placeOrder</h4>
<pre>public final&nbsp;<a href="../generation/TestOrder.html" title="class in generation">TestOrder</a>&nbsp;placeOrder(generation.Order.Builder&nbsp;builder,
                                  boolean&nbsp;perfect)</pre>
<div class="block">Shortcut default to non-deterministic factory for <code>MazeFactoryTest#placeOrder(Builder, boolean, MazeFactory)</code>.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>builder</code> - The maze builder to use</dd>
<dd><code>perfect</code> - true for a perfect maze; false otherwise</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>the order that was placed</dd>
</dl>
</li>
</ul>
<a name="placeOrderAndWait-generation.Order.Builder-boolean-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>placeOrderAndWait</h4>
<pre>public final&nbsp;<a href="../generation/TestOrder.html" title="class in generation">TestOrder</a>&nbsp;placeOrderAndWait(generation.Order.Builder&nbsp;builder,
                                         boolean&nbsp;perfect)</pre>
<div class="block">Shortcut default to non-deterministic factory for <code>MazeFactoryTest#placeOrderAndWait(Builder, boolean, MazeFactory)</code>.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>builder</code> - The maze builder to use</dd>
<dd><code>perfect</code> - true for a perfect maze; false otherwise</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>the order that was placed, should be completed when returned</dd>
</dl>
</li>
</ul>
<a name="testVaryingSkillLevels-generation.Order.Builder-boolean-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testVaryingSkillLevels</h4>
<pre>public final&nbsp;void&nbsp;testVaryingSkillLevels(generation.Order.Builder&nbsp;builder,
                                         boolean&nbsp;perfect)</pre>
<div class="block">Test that a builder handles different skill levels</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>builder</code> - the builder to test</dd>
<dd><code>perfect</code> - true for a perfect maze; false otherwise</dd>
</dl>
</li>
</ul>
<a name="testOrderWhileBusy-generation.Order.Builder-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testOrderWhileBusy</h4>
<pre>public final&nbsp;void&nbsp;testOrderWhileBusy(generation.Order.Builder&nbsp;builder)</pre>
<div class="block">Test that a builder correctly ignores a second order while busy.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>builder</code> - the builder to test</dd>
</dl>
</li>
</ul>
<a name="testSmoothCancel-generation.Order.Builder-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testSmoothCancel</h4>
<pre>public final&nbsp;void&nbsp;testSmoothCancel(generation.Order.Builder&nbsp;builder)</pre>
<div class="block">Test that a builder can fulfill an order correctly after one has been cancelled.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>builder</code> - the builder to test</dd>
</dl>
</li>
</ul>
<a name="testDeterministic-generation.Order.Builder-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testDeterministic</h4>
<pre>public final&nbsp;void&nbsp;testDeterministic(generation.Order.Builder&nbsp;builder)</pre>
<div class="block">Test that a builder generates mazes consistently when in a deterministic factory.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>builder</code> - the builder to test</dd>
</dl>
</li>
</ul>
<a name="testNonDeterministic-generation.Order.Builder-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testNonDeterministic</h4>
<pre>public final&nbsp;void&nbsp;testNonDeterministic(generation.Order.Builder&nbsp;builder)</pre>
<div class="block">Test to make sure random factory indeed produces inconsistent results.
 It is possible but extremely unlikely that this will fail even if a random factory is being used.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>builder</code> - the builder to test</dd>
</dl>
</li>
</ul>
<a name="testPerfectImperfectDFS--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testPerfectImperfectDFS</h4>
<pre>public final&nbsp;void&nbsp;testPerfectImperfectDFS()</pre>
<div class="block">Test to check that DFS creates a successful maze for both a 'perfect' (no rooms) and 'imperfect' (rooms) specification.</div>
</li>
</ul>
<a name="testVaryingSkillDFS--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testVaryingSkillDFS</h4>
<pre>public final&nbsp;void&nbsp;testVaryingSkillDFS()</pre>
<div class="block">Test that the DFS builder handles varying skill levels. This test can take a while.</div>
</li>
</ul>
<a name="testOrderWhileBusyDFS--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testOrderWhileBusyDFS</h4>
<pre>public final&nbsp;void&nbsp;testOrderWhileBusyDFS()</pre>
<div class="block">Test that DFS builder correctly ignores an order while busy using <code>MazeFactoryTest#testOrderWhileBusy(Builder)</code>.</div>
</li>
</ul>
<a name="testSmoothCancelDFS--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testSmoothCancelDFS</h4>
<pre>public final&nbsp;void&nbsp;testSmoothCancelDFS()</pre>
<div class="block">Test that DFS can fulfill an order correctly after one has been cancelled using <code>MazeFactoryTest#testSmoothCancel(Builder)</code>.</div>
</li>
</ul>
<a name="testDeterministicDFS--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testDeterministicDFS</h4>
<pre>public final&nbsp;void&nbsp;testDeterministicDFS()</pre>
<div class="block">Test that DFS generates mazes consistently when used in a deterministic factory using <code>MazeFactoryTest#testDeterministic(Builder)</code>.</div>
</li>
</ul>
<a name="testNonDeterministicDFS--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testNonDeterministicDFS</h4>
<pre>public final&nbsp;void&nbsp;testNonDeterministicDFS()</pre>
<div class="block">Test that DFS with non-deterministic factory generates inconsistent mazes using <code>MazeFactoryTest#testNonDeterministic(Builder)</code>.</div>
</li>
</ul>
<a name="testPerfectImperfectPrim--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testPerfectImperfectPrim</h4>
<pre>public final&nbsp;void&nbsp;testPerfectImperfectPrim()</pre>
<div class="block">Test to check that Prim creates a successful maze for both a 'perfect' (no rooms) and 'imperfect' (rooms) specification.</div>
</li>
</ul>
<a name="testVaryingSkillPrim--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testVaryingSkillPrim</h4>
<pre>public final&nbsp;void&nbsp;testVaryingSkillPrim()</pre>
<div class="block">Test that the Prim builder handles varying skill levels. This test can take a while.</div>
</li>
</ul>
<a name="testOrderWhileBusyPrim--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testOrderWhileBusyPrim</h4>
<pre>public final&nbsp;void&nbsp;testOrderWhileBusyPrim()</pre>
<div class="block">Test that Prim builder correctly ignores an order while busy using <code>MazeFactoryTest#testOrderWhileBusy(Builder)</code>.</div>
</li>
</ul>
<a name="testSmoothCancelPrim--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testSmoothCancelPrim</h4>
<pre>public final&nbsp;void&nbsp;testSmoothCancelPrim()</pre>
<div class="block">Test that Prim can fulfill an order correctly after one has been cancelled using <code>MazeFactoryTest#testSmoothCancel(Builder)</code>.</div>
</li>
</ul>
<a name="testDeterministicPrim--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testDeterministicPrim</h4>
<pre>public final&nbsp;void&nbsp;testDeterministicPrim()</pre>
<div class="block">Test that Prim generates mazes consistently when used in a deterministic factory using <code>MazeFactoryTest#testDeterministic(Builder)</code>.</div>
</li>
</ul>
<a name="testNonDeterministicPrim--">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>testNonDeterministicPrim</h4>
<pre>public final&nbsp;void&nbsp;testNonDeterministicPrim()</pre>
<div class="block">Test that Prim with non-deterministic factory generates inconsistent mazes using <code>MazeFactoryTest#testNonDeterministic(Builder)</code>.</div>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../generation/package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/MazeFactoryTest.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../deprecated-list.html">Deprecated</a></li>
<li><a href="../index-files/index-1.html">Index</a></li>
<li><a href="../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../generation/MazeBuilderKruskalTest.html" title="class in generation"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="../generation/TestOrder.html" title="class in generation"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="../index.html?generation/MazeFactoryTest.html" target="_top">Frames</a></li>
<li><a href="MazeFactoryTest.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>
